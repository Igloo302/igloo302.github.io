<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>冰屋里</title>
  
  <subtitle>设计，技术，和生活的其他</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-19T00:54:04.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Igloo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一次文艺复兴</title>
    <link href="http://yoursite.com/%E4%B8%80%E6%AC%A1%E6%96%87%E8%89%BA%E5%A4%8D%E5%85%B4/"/>
    <id>http://yoursite.com/%E4%B8%80%E6%AC%A1%E6%96%87%E8%89%BA%E5%A4%8D%E5%85%B4/</id>
    <published>2020-03-17T15:16:05.000Z</published>
    <updated>2020-03-19T00:54:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天后知后觉知道了交大柠檬这个产品，和最近刚刚重置的水源社区（去年底看到有学联（？）有发布类似的人员招募贴，不知道是不是他们的作品）。</p><p>文艺复兴，不错。</p><a id="more"></a><p>互联网、社交、信息、内容交织在一起，Z世代应该恰好经历「互联网社交」从小众垂直玩物到大众发言，以及现在愈发明显的中心化趋势。如今，曾经如日中天的贴吧、个人博客、垂直BBS风烛残年，个中人员和文化已然被解构重组，个人的声浪被淹没在KOL、MCN之中，曾经围绕物理的生活和心理的兴趣的讨论社群似乎渐渐凋亡。（就事论事，产品话题，不要过度解读，下同，谢谢）</p><p>并不是没有人在坚持或者重启这种「网络社交乌托邦 」（例子不展开），不过，在新的内容形式下孕育出豆瓣鹅组，贴吧超话，B站B博「对了还有钉钉会议」这些老树新芽似乎更能开枝散叶。</p><hr><p><img src="http://q6735zi7x.bkt.clouddn.com/lemon.jpg" alt="lemon"></p><p>简单体验了一下Lemon，从公众号历史文章中寻迹，交大柠檬是从「工具型的服务号和小程序」开始，提供活动报名|闲置物品|失物招领三项功能，到三月中旬2.0主要更新的「交大心情」，一个「疗愈」的社交平台。</p><p>柠檬的设计在线，用一个非常具象的水果形象🍋作为代号，<del>虽然意义上我没有去细看</del>，比其他的上一个level了，给人足够的印象，视觉也黄得统一，交互细节方面也看得出下了功夫。</p><p>去年年中提出过这么一个问题——</p><p><img src="http://q6735zi7x.bkt.clouddn.com/lemon-wechat.jpg" alt="lemon-wechat"></p><p>这个问题应该很多人都能捕捉到，一些LBS的非标准、个性化的需求被切割到不同的平台中，就交大来说，活动发布在同去，二手交易在QQ群，实习信息在微信，再加上失物招领有交大丢丢以一个社团的形式在做。图中「信息难以留存」是其中一个痛点和短板。将内容从发布到留存的体验进行重整，做好资源的整合，物理的便利性就能成为平台的护城河。</p><p>除了实习信息发布，其余几项功能Lemon都已经上线，<strong>失物招领中的校园卡专区令人很惊喜</strong>。</p><hr><p>聊社区，多谈谈「交大心情」吧。</p><p>「交大心情」分了「瞬间」和「心情」两个板块，彼此关联度不大。</p><p>前者是post（称为瞬间）发布，字数我拉了一篇狗屁不通文章会截断触发上限，目测几百字，纯文本格式；支持一次修改；可配一张图；可添加地点（隐私提示好评）；可手动添加网易云链接；有官方号置顶和热门置顶；可进行赞（🍋）和回复；无搜索功能；仅显示168小时的瞬间。</p><p>后者可以在每日下午四点-上午四点发布自己的心情；所有用户心情生成交大心情柱状图（这边明文显示了发布人数，因为总使用人数较少，所以不清楚是否有做数据脱敏）；我的瞬间入口查看所有已发布的post。</p><p>如果单看「瞬间」页面，似乎可以将这个产品定义为<strong>交大人的朋友圈</strong>，文、图、音的组合给了足够的自由度，内容上也没有做太多的限制。但「心情」页面透露了主创的真实想法，🍋并非一个唾手而得的意向，这是想要给这个社区做定调：酸。</p><p>「我🍋了」是一个Newspeak——我们敢于去表达自己的真实的羡慕而不是像那个把人夸得天花乱坠的社会实验。面对无处不在的压力，我们不再求夸，也不是求安慰，而是用「酸」来疗愈自己；当我们忧伤时我们需要的不是倾听者，是一同吃柠檬的人；当我们快乐时我们需要的不是夸奖者，是被疯狂吃柠檬。笔者猜想主创应该是最开始就捕捉了这种新时代的排解方式，让我也酸一下主创团队的年轻人真的很优秀。</p><p>这样再来看「瞬间」，翻阅了历史的发言，总体发表的是小小的生活细节和一时的小小态度，更像是对「心情」之酸/甜的具体展开了。</p><p>因此，这个展示交大的喜怒哀乐的社区像是一个树洞。从产品设计也能找到端倪，目前「瞬间」并没有提供用户关注、内容转发的功能，强调主动创作的内容，弱化了用户（也许就是还没开发）。</p><p>小而美。</p><hr><p>虽然笔者非常欣赏这种充满情怀和诚意的产品，但是从整个校园垂直社区产品来看，目前的交大心情并不是这个社区理想的状态，这里提几个小小的<del>建议</del>想法吧。</p><ol><li>上线社区tag、搜索。置顶的两条瞬间启动了两个话题，「情侣在家如何谈恋爱」和「青你2pick谁」，作为一个单身狗和不看综艺的用户，两个话题自然与我无关= =。 社区没有给这种具有充分讨论空间的话题给足够的延伸空间。</li><li>一个独立的热门页面。目前热门-展开的操作体验不太流畅，而且未来难以承载更多的内容。折叠的回复空间略显局促了。</li><li>在交大心情beta期之后，首页直接露出优质内容。柠檬的设计更像一个原生App而非小程序，另外也期待早日有原生App。</li></ol><p>笔者认为，「你会说话你就多说说」并不是一句笑谈，我们的发言难度是变得更低的，那也让内容的无形比拼变得更为激烈，但这并不是一件坏事，「心情」之外，希望柠檬给更多的空间给交大的好内容。</p><p>从柠檬的设计，公众号的风格，以及官方账号的运营看得出主创团队的情怀和热情，加油。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天后知后觉知道了交大柠檬这个产品，和最近刚刚重置的水源社区（去年底看到有学联（？）有发布类似的人员招募贴，不知道是不是他们的作品）。&lt;/p&gt;
&lt;p&gt;文艺复兴，不错。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="产品" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81/"/>
    
      <category term="社交" scheme="http://yoursite.com/tags/%E7%A4%BE%E4%BA%A4/"/>
    
      <category term="柠檬" scheme="http://yoursite.com/tags/%E6%9F%A0%E6%AA%AC/"/>
    
  </entry>
  
  <entry>
    <title>7×24: 私人黄金屋Calibre Web</title>
    <link href="http://yoursite.com/7%C3%9724-Calibre-Web/"/>
    <id>http://yoursite.com/7%C3%9724-Calibre-Web/</id>
    <published>2020-03-15T22:18:04.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Calibre是我一直在使用的一款书籍管理软件，但是Calibre总体设计是一款本地桌面软件，对于书库的多平台管理不太友好。Calibre Web使用了Calibre的数据库，是一个轻量化的Web版的Calibre，本节介绍一下如何在Docker上部署Calibre Web和基本的配置。</p><a id="more"></a><p><a href="https://github.com/janeczku/calibre-web" target="_blank" rel="noopener">Calibre Web</a>推荐了两个Docker镜像，technosoft2000/calibre-web支持linux/amd64，linuxserver/calibre-web的电子书转换功能只有x86-64可以用（安装后发现calibre-web可以使用外部的转换器）。</p><p>在N1上安装linuxserver/calibre-web的指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name=calibre-web \</span><br><span class="line">  -e PUID=0 \</span><br><span class="line">  -e PGID=0 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -p 8083:8083\</span><br><span class="line">  -v /media/Travel/Document/calibre-web:/config \</span><br><span class="line">  -v /media/Travel/Document/Calibre:/books \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  linuxserver/calibre-web</span><br></pre></td></tr></table></figure><p>注意，此处将PUID和PGID都设置成了0，是一个不太靠谱的做法。正确的做法是和qB一样，创建一个同名用户，将这个Docker容器指定到这个用户。不过用户权限的细节我不是特别明白，所以就先指定到root用户了。</p><p>打开your-ip:8083，将书库设为/books。</p><p>初始登录账号密码为Username: admin，Password: admin123。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/Calibre-web.png" alt="Calibre-web"></p><p>登录后点击右上角的admin，输入自定义的用户名和密码，语言可以修改为中文。在管理页面可以详细设置不同的用户和权限。</p><p>Calibre Web默认是关闭上传功能的，在管理-配置-基本配置-特性配置中打开上传。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/calibre-web-upload.jpg" alt="calibre-web-upload"></p><p>所有配置方法都可以在<a href="https://github.com/janeczku/calibre-web/wiki" target="_blank" rel="noopener">官方Wiki</a>中找到。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Calibre是我一直在使用的一款书籍管理软件，但是Calibre总体设计是一款本地桌面软件，对于书库的多平台管理不太友好。Calibre Web使用了Calibre的数据库，是一个轻量化的Web版的Calibre，本节介绍一下如何在Docker上部署Calibre Web和基本的配置。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="7×24" scheme="http://yoursite.com/tags/7%C3%9724/"/>
    
      <category term="N1" scheme="http://yoursite.com/tags/N1/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Calibre" scheme="http://yoursite.com/tags/Calibre/"/>
    
  </entry>
  
  <entry>
    <title>7×24: IoT = Internet of Trash? Home Assistant打造全屋智能</title>
    <link href="http://yoursite.com/7%C3%9724-Home-Assistant/"/>
    <id>http://yoursite.com/7%C3%9724-Home-Assistant/</id>
    <published>2020-03-15T16:56:53.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>几年前在国外住过一个别墅，里面的智能家居设计给我留下了深刻的印象：吧台上有一个控制平板，统一控制各个房间的照明和空调温度，通过音箱播放流媒体歌曲，控制电视机播放的Netflix电视剧；每个房间还有独立的分机控制开关来单独控制各自房间的设备。</p><p>虽然说起来并不新鲜，甚至并没有突破IoT=网络开关这个初级阶段，但是这种高度一致化的交互方式，在家庭空间尺度上和互联网内容亲密互动的感觉，都带来了超越产品功能本身的愉快体验。</p><a id="more"></a><p>对于智能家居和IoT，很容易想到国内的米家，天猫精灵等互联网、电商以及传统白电厂商搞出的各个体系，其中米家推出了全面的家电产品、控制器以及传感器元件，价格也不太贵，综合体验可能是最好的。但是他们共有的问题就是不同的体系都在使用自己的私有协议，无法互相协作使用。</p><p>比方说我家里就有天猫精灵，小米的扫地机，博联的灯，美的的空调，Sony的电视……这种智能家居充其量只是可以用手机App（还不是一个App）控制的电器罢了。</p><p>如何改变这种现状呢？让国内的厂商现在放弃分蛋糕自然是不可能，那就要本文的主角登场了——</p><p><img src="http://q6735zi7x.bkt.clouddn.com/homeassistant-logo.png" alt="homeassistant-logo"></p><p>和图标的设计一样，Home Assistant的目标是成为全屋的大脑。作为一个开源项目，开发者们将不同厂商，不同协议的IoT设备整合进这个平台，互相之间得以联动。这种联动具有很强的拓展性，可以在上面实现摄像头的人脸、宠物识别，使用TTS引擎播放特殊的文案，给你的手机推送消息等等，而不再局限于硬件厂商给你的（付费）功能。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/ha-demo.jpg" alt="ha-demo"></p><p><a href="https://demo.home-assistant.io/" target="_blank" rel="noopener">官方Domo</a>展示了HA一部分的有趣的应用。</p><p>这边会有几个乱七八糟的概念：</p><blockquote><p><a href="https://github.com/home-assistant" target="_blank" rel="noopener">Home Assistant</a> 是一款基于 Python 的智能家居开源系统。</p><p>——<a href="https://home-assistant.cc/" target="_blank" rel="noopener">Home Assistant 中文文档</a></p><p><a href="https://www.home-assistant.io/hassio/" target="_blank" rel="noopener">Hass.io</a>：一个完整的UI管理的家庭自动化生态系统，它运行Home Assistant，Hass.io Supervisor和附加组件。它预先安装在HassOS上，但可以安装在任何Linux系统上。它利用了由Hass.io Supervisor管理的Docker。</p><p><strong>Hass.io Supervisor</strong>：Hass.io Supervisor是管理Hass.io安装的程序，负责安装和更新Home Assistant，附加组件本身以及更新（如果使用的话）HassOS操作系统。</p><p><strong>HassOS</strong>：HassOS，家庭助理操作系统，是一种嵌入式，简约的操作系统，旨在在单板计算机（如Raspberry Pi）或虚拟机上运行Hass.io生态系统。Hass.io Supervisor可以使其保持最新状态，从而无需管理操作系统</p><p>——<a href="https://www.hachina.io/" target="_blank" rel="noopener">HAChina 中文网</a></p></blockquote><p>这四个定义中居然出现了三个「系统」…这个概念确实比较混乱，如果我们拿一台安装Armbian系统，安装Kodi的树莓派来类比的话，大概类似下图，Home-Assistant（或者叫Home Assistant Core）是最核心的功能，相当于Kodi的核心功能。</p><p>Hass.io包含了HA和附加组件，会有一键安装插件等功能，相当于一个完整的Kodi。</p><blockquote><p>Hass.io 原生提供各项功能的插件 Add-on，入口为侧边栏 『Hass.io』。Add-on 的提供方式形似应用商店，一键安装与自动配置相关功能。</p><p>——<a href="https://home-assistant.cc/hassio/addon/" target="_blank" rel="noopener">Home Assistant 中文文档</a></p></blockquote><p>而HassOS是一个专门为树莓派设计的，预装Hass.io的定制系统。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/ha.png" alt="ha"></p><p>目前<a href="https://www.home-assistant.io/getting-started/" target="_blank" rel="noopener">官方推荐的安装方法</a>是拿一个树莓派来安装<a href="https://www.home-assistant.io/hassio/" target="_blank" rel="noopener">Hass.io</a>/HassOS，这是最简单的，就和其他的树莓派系统一样（下载镜像刷到TF卡里面运行），可以降低使用的门槛，而且树莓派本身有GPIO，但是相对来说，成本也是比较高的。</p><p>总结来说——</p><table><thead><tr><th>设备</th><th>方法</th><th>功能完整</th><th>安装难度</th></tr></thead><tbody><tr><td>树莓派、英特尔NUC等<a href="https://www.home-assistant.io/hassio/installation/" target="_blank" rel="noopener">官方支持的硬件</a></td><td><a href="https://www.home-assistant.io/getting-started" target="_blank" rel="noopener">Hass.io/HassOS</a></td><td>✦✦✦✦✦</td><td>✦✧✧✧✧</td></tr><tr><td>主流发行版Linux主机</td><td><a href="https://www.home-assistant.io/hassio/installation/#alternative-install-home-assistant-supervised-on-a-generic-linux-host" target="_blank" rel="noopener">Home Assistant Supervised</a></td><td>✦✦✦✦✦✧</td><td>✦✦✧✧✧</td></tr><tr><td>/</td><td><a href="https://www.home-assistant.io/docs/installation/docker/" target="_blank" rel="noopener">Docker安装</a>（群晖NAS<a href="https://www.home-assistant.io/docs/installation/docker/#synology-nas" target="_blank" rel="noopener">稍有不同</a>）</td><td>✦✦✦✧✧✧</td><td>✦✦✧✧✧</td></tr><tr><td>不限</td><td>Python <a href="https://www.home-assistant.io/docs/installation/raspberry-pi/" target="_blank" rel="noopener">venv(as another user)</a> 或者<a href="https://www.home-assistant.io/docs/installation/virtualenv/" target="_blank" rel="noopener">venv(as your user)</a></td><td>✦✦✦✧✧✧</td><td>✦✦✦✦✧</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>接下来介绍一下我尝试的两种方法。</p><h2 id="Android手机-Linux-Deploy-Python"><a href="#Android手机-Linux-Deploy-Python" class="headerlink" title="Android手机+Linux Deploy+Python"></a>Android手机+Linux Deploy+Python</h2><p>有Python开发经验的小伙伴肯定使用过PIP，作为同样是Python开发的Home-Assistant，自然也是可以使用python pip来安装的。（截止2020年03月，HA官方将该方法列为替代安装方法，Hass.io取代纯安装HA Core应该也是趋势，对于本节的硬件情况，<a href="https://www.home-assistant.io/hassio/installation/#alternative-install-home-assistant-supervised-on-a-generic-linux-host" target="_blank" rel="noopener">Home Assistant Supervised</a>和<a href="https://www.home-assistant.io/docs/installation/docker/" target="_blank" rel="noopener">Docker安装</a>是更好的选择）</p><p>大家家里都有旧Android手机，Linux Deploy这个神器可以在Android系统中安装一个完整的Linux系统，比如ubuntu、fedora等。</p><h3 id="Linux-Deploy"><a href="#Linux-Deploy" class="headerlink" title="Linux Deploy"></a>Linux Deploy</h3><ol><li>Root手机，安装BusyBox和Linux Deploy，打开Linux Deploy - 设置 - 更新环境</li><li>点击Linux Deploy右下角的配置进行设定：<ol><li>发行版设置为ubuntu</li><li>源地址：<a href="http://mirrors.ustc.edu.cn/ubuntu-ports/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/ubuntu-ports/</a></li><li>设定账号密码</li><li>勾选启用SSH</li></ol></li><li>返回主界面，点击右上角 - 安装，然后就是慢慢等到显示<code>&lt;&lt;&lt; deploy</code>字样了。</li></ol><h3 id="安装Home-Assistant"><a href="#安装Home-Assistant" class="headerlink" title="安装Home-Assistant"></a>安装Home-Assistant</h3><p>这个过程其实和任何ubunut系统无太大差异。</p><ol><li><p>SSH访问手机上运行的ubuntu。</p></li><li><p>Python 3应该已经默认安装了，以<code>python -v</code>查看版本</p></li><li><p>安装相关依赖</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libssl-dev libffi-dev python3-dev</span><br></pre></td></tr></table></figure><ol start="4"><li>安装pip3</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y python3-pip</span><br></pre></td></tr></table></figure><ol start="5"><li><p>更换pip源</p><p>默认的pip源比较慢，按照这个<a href="https://blog.csdn.net/xuezhangjun0121/article/details/81664260" target="_blank" rel="noopener">教程</a>换成国内源，在<code>~/.pip/pip.conf</code>中添加</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><ol start="6"><li>安装Home-Assistant</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install homeassistant -i &lt;https://pypi.tuna.tsinghua.edu.cn/simple&gt;</span><br></pre></td></tr></table></figure><ol start="7"><li>设置自启动：<a href="https://home-assistant.cc/installation/autostart/" target="_blank" rel="noopener">自启</a></li></ol><p>重启后就可以通过<code>192.168.x.x:8123</code>访问HA了。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://bbs.hassbian.com/forum.php?mod=viewthread&tid=27" target="_blank" rel="noopener">Ubuntu安装HomeAssistant教程</a></p><p><a href="https://post.smzdm.com/p/553097/" target="_blank" rel="noopener">没有树莓派？没关系，手机也行！闲置安卓设备打造智能家庭中枢</a></p><h2 id="N1-Linux-Docker"><a href="#N1-Linux-Docker" class="headerlink" title="N1(Linux)+Docker"></a>N1(Linux)+Docker</h2><p>荒野无灯的N1小钢炮ROM自带了Docker，让安装HA变得很简单。</p><p>修改一下docker的源，打开或创建/etc/docker/daemon.json（Linux） 或%programdata%\docker\config\daemon.json（Windows），向其中添加<code>registry-mirrors</code>项，使用交大的源，最终配置类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;docker.mirrors.sjtug.sjtu.edu.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启docker即可生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取HA镜像</span></span><br><span class="line">docker pull homeassistant/home-assistants</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建HA容器</span></span><br><span class="line">docker run -d --restart=always \</span><br><span class="line"> --name="home-assistant" \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">-v /media/Travel/Document/home-assistant:/config \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">--net=host \</span><br><span class="line">homeassistant/home-assistant</span><br></pre></td></tr></table></figure><p><code>/media/Travel/Document/home-assistant</code>更改为配置文件的存储目录。</p><h2 id="HA配置"><a href="#HA配置" class="headerlink" title="HA配置"></a>HA配置</h2><h3 id="基本设定"><a href="#基本设定" class="headerlink" title="基本设定"></a>基本设定</h3><p>打开配置文件configuration.yaml，添加以下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">homeassistant:</span></span><br><span class="line">  <span class="comment"># 名称，可为中文</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Home</span></span><br><span class="line">  <span class="comment"># 纬度</span></span><br><span class="line">  <span class="attr">latitude:</span> <span class="type">!secret</span> <span class="string">latitude</span></span><br><span class="line">  <span class="comment"># 经度</span></span><br><span class="line">  <span class="attr">longitude:</span> <span class="type">!secret</span> <span class="string">longitude</span></span><br><span class="line">  <span class="comment"># 海拔</span></span><br><span class="line">  <span class="attr">elevation:</span> <span class="number">10</span></span><br><span class="line">  <span class="comment"># 度量单位，这里选择“米”</span></span><br><span class="line">  <span class="attr">unit_system:</span> <span class="string">metric</span></span><br><span class="line">  <span class="comment"># 时区</span></span><br><span class="line">  <span class="attr">time_zone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">  <span class="comment"># 设备个性化</span></span><br><span class="line">  <span class="attr">customize:</span> <span class="type">!include</span> <span class="string">customize.yaml</span></span><br></pre></td></tr></table></figure><p>使用<a href="https://support.google.com/earth/answer/7420934?co=GENIE.Platform%3DDesktop&hl=zh-Hans" target="_blank" rel="noopener">Google Earth</a>查询坐标和海拔后，打开secrets.yaml添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">latitude:</span> <span class="string">3xxxxx</span></span><br><span class="line"><span class="attr">longitude:</span> <span class="string">1xxxxx</span></span><br></pre></td></tr></table></figure><h3 id="BroadLink-SP-mini3天猫精灵定制版"><a href="#BroadLink-SP-mini3天猫精灵定制版" class="headerlink" title="BroadLink SP mini3天猫精灵定制版"></a>BroadLink SP mini3天猫精灵定制版</h3><p>之前买天猫精灵送了一个定制版的Wi-Fi插座，经过尝试添加到HA的方法如下：</p><ol><li>天猫精灵解绑，下载智慧星App，以BroadLink SP mini3天猫精灵定制版连接。</li><li>打开天猫精灵App，在技能中搜索BroadLink，绑定智慧星账号</li><li>在HA的配置configuration.yaml中添加</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">switch:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">platform:</span> <span class="string">broadlink</span></span><br><span class="line">   <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.6</span><span class="string">.xxx</span></span><br><span class="line">   <span class="attr">mac:</span> <span class="string">'78:0F:77:xx:xx:xx'</span></span><br><span class="line">   <span class="attr">type:</span>  <span class="string">sp2</span></span><br><span class="line">   <span class="attr">friendly_name:</span> <span class="string">'SwitchName'</span></span><br><span class="line">   <span class="attr">scan_interval:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="天猫精灵"><a href="#天猫精灵" class="headerlink" title="天猫精灵"></a>天猫精灵</h3><blockquote><p>认真研读了官方文档，又拾起了多年不用的php，重写了天猫精灵的接入代码，又精益求精、不断优化，提高响应速度，在开发、测试了将近20天后，终于有了现在这个比较满意的版本。同时接到官方的通知，得知天猫精灵APP即将改版（现在新版已经发布），技能一律以品牌形式展示，技能也作了相应调整。</p><p><a href="https://bbs.hassbian.com/home.php?mod=space&uid=4" target="_blank" rel="noopener">囧</a> - <strong><a href="eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI2NDhmODRhMWE5ZmM0ZjE2YmIyNGY3MzFlZjlmMjUyNiIsImlhdCI6MTU4NDM0Mzk3MSwiZXhwIjoxODk5NzAzOTcxfQ.gL9ikMJUhQy1EnZ_vpKmnYK51y4xwLfUulILeq2xc00">论坛新版天猫精灵接入技能正式发布！</a></strong></p></blockquote><h3 id="Homebridge"><a href="#Homebridge" class="headerlink" title="Homebridge"></a>Homebridge</h3><p>虽然Home Assistant已经原生支持了<a href="https://www.home-assistant.io/integrations/homekit" target="_blank" rel="noopener">HomeKit</a>，但暂时不支持监控摄像头的显示，因此还是需要使用Homebridge。</p><p>用oznu的<a href="https://hub.docker.com/r/oznu/homebridge" target="_blank" rel="noopener">Homebridge镜像</a>创建容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --net&#x3D;host \</span><br><span class="line">  --name&#x3D;homebridge \</span><br><span class="line">  -e PUID&#x3D;0 -e PGID&#x3D;0 \</span><br><span class="line">  -e TZ&#x3D;Asia&#x2F;Shanghai \</span><br><span class="line">  -v &#x2F;media&#x2F;Travel&#x2F;Document&#x2F;homebridge:&#x2F;homebridge \</span><br><span class="line">  oznu&#x2F;homebridge</span><br></pre></td></tr></table></figure><p>注意：注意，此处将PUID和PGID都设置成了0，是一个不太靠谱的做法。正确的做法是和qB一样，创建一个同名用户，将这个Docker容器指定到这个用户。不过用户权限的细节我不是特别明白，所以就先指定到root用户了。</p><p>当显示出二维码的时候，安装成功，按Ctrl+C退出，然后输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行容器</span></span><br><span class="line">docker start homebridge</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装homebridge-homeassistant插件</span></span><br><span class="line">docker exec homebridge npm install homebridge-homeassistant</span><br></pre></td></tr></table></figure><p>修改Homebridge的配置文件config.json，以下是我的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;bridge&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;Homebridge&quot;,</span><br><span class="line">        &quot;username&quot;: &quot;……&quot;,</span><br><span class="line">        &quot;port&quot;: 51856,</span><br><span class="line">        &quot;pin&quot;: &quot;031-45-154&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;accessories&quot;: [],</span><br><span class="line">    &quot;platforms&quot;: [&#123;</span><br><span class="line">        &quot;platform&quot;: &quot;HomeAssistant&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;HomeAssistant&quot;,</span><br><span class="line">        &quot;host&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:8123&quot;, </span><br><span class="line">        &quot;password&quot;: &quot;&quot;,</span><br><span class="line">        &quot;supported_types&quot;: [&quot;media_player&quot;, &quot;binary_sensor&quot;, &quot;climate&quot;, &quot;cover&quot;, &quot;fan&quot;, &quot;group&quot;, &quot;input_boolean&quot;, &quot;light&quot;, &quot;lock&quot;, &quot;remote&quot;, &quot;scene&quot;, &quot;sensor&quot;, &quot;switch&quot;],</span><br><span class="line">        &quot;default_visibility&quot;: &quot;visible&quot;, </span><br><span class="line">        &quot;logging&quot;: false,</span><br><span class="line">        &quot;verify_ssl&quot;: false</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启HomeBridge容器就生效了，去iOS中的HomeKit添加配件。</p><p>参考：<a href="https://liangshuang.name/2017/07/24/homebridge-homeassistant-in-docker/" target="_blank" rel="noopener">使用Docker安装Home Bridge与Home Assistant，用Siri控制智能家居</a></p><hr><p>持续更新……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几年前在国外住过一个别墅，里面的智能家居设计给我留下了深刻的印象：吧台上有一个控制平板，统一控制各个房间的照明和空调温度，通过音箱播放流媒体歌曲，控制电视机播放的Netflix电视剧；每个房间还有独立的分机控制开关来单独控制各自房间的设备。&lt;/p&gt;
&lt;p&gt;虽然说起来并不新鲜，甚至并没有突破IoT=网络开关这个初级阶段，但是这种高度一致化的交互方式，在家庭空间尺度上和互联网内容亲密互动的感觉，都带来了超越产品功能本身的愉快体验。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="7×24" scheme="http://yoursite.com/tags/7%C3%9724/"/>
    
      <category term="Home Assistant" scheme="http://yoursite.com/tags/Home-Assistant/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Linux Deploy" scheme="http://yoursite.com/tags/Linux-Deploy/"/>
    
      <category term="N1" scheme="http://yoursite.com/tags/N1/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="IoT" scheme="http://yoursite.com/tags/IoT/"/>
    
      <category term="智能家居" scheme="http://yoursite.com/tags/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/"/>
    
  </entry>
  
  <entry>
    <title>物尽其用|中兴B860AV1.1-T2 IPTV盒子破解</title>
    <link href="http://yoursite.com/%E7%89%A9%E5%B0%BD%E5%85%B6%E7%94%A8-%E4%B8%AD%E5%85%B4B860AV1-1-T2-IPTV%E7%9B%92%E5%AD%90%E7%A0%B4%E8%A7%A3/"/>
    <id>http://yoursite.com/%E7%89%A9%E5%B0%BD%E5%85%B6%E7%94%A8-%E4%B8%AD%E5%85%B4B860AV1-1-T2-IPTV%E7%9B%92%E5%AD%90%E7%A0%B4%E8%A7%A3/</id>
    <published>2020-03-15T12:16:14.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>注意：仅在杭州电信B860AV1.1-T2测试。</p><a id="more"></a><h2 id="软破法"><a href="#软破法" class="headerlink" title="软破法"></a>软破法</h2><p>所谓软破就是不需要使用特殊的硬件，通过打开B860AV1.1的ADB来修改系统。</p><ol><li><p>配置网络</p><p>打开盒子，点击遥控器的「设置」，密码为6321。将盒子连接到有线网络或者Wifi（忽略鉴权相关设置）</p></li><li><p>打开ADB</p><p>在设置中，找到打开ADB，需要输入密码。下载ADB<a href="https://pan.baidu.com/s/1WwNkc1l3PKcDyRCNb3T58g" target="_blank" rel="noopener">密码计算器</a></p><p><img src="http://q6735zi7x.bkt.clouddn.com/chashcode.jpg" alt="chashcode"></p></li><li><p>通过ADB连接盒子，在电脑上输入命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb connect 192.168.1.xxx</span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">mount -o remount -o rw /system</span><br></pre></td></tr></table></figure><ol start="4"><li>后续的操作和拆机法相同。</li></ol><h2 id="拆机法"><a href="#拆机法" class="headerlink" title="拆机法"></a>拆机法</h2><p>该方法为通用方法，需要准备硬件USB转TTL线（一般型号CH340G），如果板子上没有焊好针脚的话，还需要点焊枪等工具。</p><ol><li><p>拆机接线</p><p>2号接GND线，5接TX线，6接RX线，针脚排列见图（图源见水印）</p></li></ol><p><img src="http://q6735zi7x.bkt.clouddn.com/CH340G.jpg" alt="CH340G"></p><ol start="2"><li>将USB口连接到电脑，打开设备管理器 - 端口 - COM - 属性 - 端口设置，将波特率改成115200</li><li>打开Putty，连接模式设置为serial（串口），填入设备管理器中的Serial line和Speed，点击Open</li></ol><p><img src="http://q6735zi7x.bkt.clouddn.com/zte-putty.jpg" alt="zte-putty"></p><ol start="4"><li><p>给盒子通电，putty开始跑码，同时插入存有桌面Apk文件的U盘</p></li><li><p>输入命令</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开adb</span></span><br><span class="line">start adbd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看U盘路径</span></span><br><span class="line">df</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制桌面App到系统中</span></span><br><span class="line">cp launcher.apk /data/app</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> （如果安装是当贝桌面）打开当贝桌面</span></span><br><span class="line">am start com.dangbei.tvlauncher</span><br></pre></td></tr></table></figure><ol start="6"><li><p>修改首页键，使其打开当贝桌面</p><p>现在，点击首页键会回到IPTV。需要添加一个脚本，将首页键映射为打开当贝桌面。创建一个<code>init.insmod_usb.sh</code>文件，将其复制到 /etc/文件夹。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/system/bin/sh</span></span><br><span class="line"></span><br><span class="line">insmod /system/lib/modules/dwc2.ko</span><br><span class="line">while [ 1 ]</span><br><span class="line">do</span><br><span class="line">rm_code=`getevent -c 1 /dev/input/event1`        </span><br><span class="line">if [ "$rm_code" = "0001 00a9 00000000" ] ; then</span><br><span class="line"><span class="meta">$</span><span class="bash">rm_code</span></span><br><span class="line">am start -n com.dangbei.tvlauncher/com.dangbei.tvlauncher.IndexActivity</span><br><span class="line">fi     </span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp init.insmod_usb.sh  /etc/</span><br><span class="line">chmod 777 /etc/init.insmod_usb.sh</span><br></pre></td></tr></table></figure><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>好久之前弄的，当时做了还做了系统备份，删除了一些无用的App，明明做了备份的，居然都找不到了QAQ</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注意：仅在杭州电信B860AV1.1-T2测试。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="ZTE" scheme="http://yoursite.com/tags/ZTE/"/>
    
      <category term="电视盒子" scheme="http://yoursite.com/tags/%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90/"/>
    
      <category term="IPTV" scheme="http://yoursite.com/tags/IPTV/"/>
    
  </entry>
  
  <entry>
    <title>7×24: 荒野无灯N1小钢炮PT下载机简单调教</title>
    <link href="http://yoursite.com/7%C3%9724-%E8%8D%92%E9%87%8E%E6%97%A0%E7%81%AFN1%E5%B0%8F%E9%92%A2%E7%82%AEPT%E4%B8%8B%E8%BD%BD%E6%9C%BA%E7%AE%80%E5%8D%95%E8%B0%83%E6%95%99/"/>
    <id>http://yoursite.com/7%C3%9724-%E8%8D%92%E9%87%8E%E6%97%A0%E7%81%AFN1%E5%B0%8F%E9%92%A2%E7%82%AEPT%E4%B8%8B%E8%BD%BD%E6%9C%BA%E7%AE%80%E5%8D%95%E8%B0%83%E6%95%99/</id>
    <published>2020-03-15T11:33:05.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文关于安装完荒野无灯N1之后，将原生的qBittorrent和Filebrowser改为Docker版本。</p><a id="more"></a><h2 id="Docker-qBittorrent"><a href="#Docker-qBittorrent" class="headerlink" title="Docker qBittorrent"></a>Docker qBittorrent</h2><p>替换原生qBittorrent ，重新安装荒野无灯编译的Docker版qBittorrent。</p><blockquote><p><strong>参考资料</strong><br><a href="http://nanodm.net:8092/archives/43/" target="_blank" rel="noopener">小钢炮使用docker版qb 4.1.6 简明教程</a><br><a href="http://nanodm.net:8092/archives/30/" target="_blank" rel="noopener">qBittorrent docker镜像：简介里没有说明的部分</a><br><a href="https://post.smzdm.com/p/594398/" target="_blank" rel="noopener">N1小钢炮下载系统 篇七：如何在小钢炮系统的Docker里安装灯大原味qBittorrent及优化设置</a></p></blockquote><ol><li>禁用原生qBittorrent </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/init.d/S92qbittorrent /etc/S92qbittorrent.disabled</span><br><span class="line">killall qbittorrent-nox</span><br></pre></td></tr></table></figure><ol start="2"><li>备份配置文件到外置存储</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -r /var/lib/qbittorrent/.config/qBittorrent /media/Travel/Document/qBittorrent/config</span><br><span class="line">cp -r /var/lib/qbittorrent/.local/share/data/qBittorrent /media/Travel/Document/qBittorrent/data</span><br></pre></td></tr></table></figure><ol start="3"><li>安装qBittorrent的脚本，保存成.sh文件运行，把网络设置成host模式会有更好的性能表现，而且UPnP/NAT-PMP可以自动映射</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">IMAGE_NAME=80x86/qbittorrent</span><br><span class="line">WEB_PORT=$(nvram get app.qb.listen_port)</span><br><span class="line">DOWNLOAD_PATH=$(cat /var/lib/qbittorrent/.config/qBittorrent/qBittorrent.conf | grep -i 'Downloads\\SavePath' | cut -d'=' -f2)</span><br><span class="line">BT_PORT=$(cat /var/lib/qbittorrent/.config/qBittorrent/qBittorrent.conf | grep -i 'Connection\\PortRangeMin' | cut -d'=' -f2)</span><br><span class="line">QBT_AUTH_SERVER_ADDR="127.0.0.1"</span><br><span class="line">if [ "$DOWNLOAD_PATH" = "/downloads" ] || [ "$DOWNLOAD_PATH" = "/downloads/" ]; then</span><br><span class="line">    echo "please set correct DOWNLOAD_PATH"</span><br><span class="line">    exit -1</span><br><span class="line">fi</span><br><span class="line">docker run -d --name qbittorrent \</span><br><span class="line">        -e PUID=$(id -u qbittorrent) \</span><br><span class="line">        -e PGID=$(cat /etc/group | grep -e '^users' | cut -d':' -f3) \</span><br><span class="line">        -e WEB_PORT=$WEB_PORT \</span><br><span class="line">        -e BT_PORT=$BT_PORT \</span><br><span class="line">        -e QBT_AUTH_SERVER_ADDR=$QBT_AUTH_SERVER_ADDR \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        --network host \</span><br><span class="line">        -v /var/lib/qbittorrent/.config/qBittorrent:/config \</span><br><span class="line">        -v /var/lib/qbittorrent/.local/share/data/qBittorrent:/data \</span><br><span class="line">        -v "$DOWNLOAD_PATH":/downloads \</span><br><span class="line">        --mount type=tmpfs,destination=/tmp \</span><br><span class="line">        $&#123;IMAGE_NAME&#125;</span><br></pre></td></tr></table></figure><p>如果要安装桥接模式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">IMAGE_NAME=80x86/qbittorrent:4.2.1-arm64</span><br><span class="line">WEB_PORT=$(nvram get app.qb.listen_port)</span><br><span class="line">[ -z "$WEB_PORT" ] &amp;&amp; WEB_PORT=8082</span><br><span class="line">DOWNLOAD_PATH=$(cat /var/lib/qbittorrent/.config/qBittorrent/qBittorrent.conf | grep -i 'Downloads\\SavePath' | cut -d'=' -f2)</span><br><span class="line">BT_PORT=$(cat /var/lib/qbittorrent/.config/qBittorrent/qBittorrent.conf | grep -i 'Connection\\PortRangeMin' | cut -d'=' -f2)</span><br><span class="line">[ -z "$BT_PORT" ] &amp;&amp; BT_PORT=8999</span><br><span class="line">QBT_AUTH_SERVER_ADDR=$(ip -4 addr show docker0 | grep inet | awk '&#123;print $2&#125;' | cut -d'/' -f1)</span><br><span class="line">if [ "$DOWNLOAD_PATH" = "/downloads" ] || [ "$DOWNLOAD_PATH" = "/downloads/" ] || [ "$DOWNLOAD_PATH" = "" ]; then</span><br><span class="line">    echo "please set correct DOWNLOAD_PATH"</span><br><span class="line">    exit -1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">docker pull $&#123;IMAGE_NAME&#125; &amp;&amp; \</span><br><span class="line">docker run -d --name qbittorrent \</span><br><span class="line">        -e PUID=$(id -u qbittorrent) \</span><br><span class="line">    -e PGID=$(cat /etc/group | grep -e '^users' | cut -d':' -f3) \</span><br><span class="line">        -e WEB_PORT=$WEB_PORT \</span><br><span class="line">        -e BT_PORT=$BT_PORT \</span><br><span class="line">        -e QBT_AUTH_SERVER_ADDR=$QBT_AUTH_SERVER_ADDR \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        -p $WEB_PORT:$WEB_PORT -p $BT_PORT:$BT_PORT/tcp -p $BT_PORT:$BT_PORT/udp \</span><br><span class="line">        -v /var/lib/qbittorrent/.config/qBittorrent:/config \</span><br><span class="line">        -v /var/lib/qbittorrent/.local/share/data/qBittorrent:/data \</span><br><span class="line">        -v "$DOWNLOAD_PATH":/downloads \</span><br><span class="line">        --mount type=tmpfs,destination=/tmp \</span><br><span class="line">        $&#123;IMAGE_NAME&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>本地免验证</p><p>（按照荒野无灯大大的说法，QBT_AUTH_SERVER_ADDR已经设置好，但是我测试没有成功。）如果无法免密码登录，可以打开qB，在设置中将本地网段添加到白名单中</p></li></ol><p><img src="http://q6735zi7x.bkt.clouddn.com/qB%E8%AE%BE%E7%BD%AE.jpg" alt="qB设置"></p><h2 id="Docker-Filebrowser"><a href="#Docker-Filebrowser" class="headerlink" title="Docker Filebrowser"></a>Docker Filebrowser</h2><ol><li>禁用原生Filebrowser</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/init.d/S99filebrowser /etc/S99filebrows.disabled</span><br><span class="line">killall filebrowser</span><br></pre></td></tr></table></figure><ol start="2"><li>设置原配置目录的权限以防止出错</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /var/lib/filebrowser</span><br></pre></td></tr></table></figure><ol start="3"><li>安装Filebrowser</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --restart always \</span><br><span class="line">         -d --name filebrowser \</span><br><span class="line">         --net=host \</span><br><span class="line">         -e SSL=on \</span><br><span class="line">         -e PUID=$(id -u filebrowser) \</span><br><span class="line">         -e PGID=$(cat /etc/group | grep -e '^users' | cut -d':' -f3) \</span><br><span class="line">         -e WEB_PORT=8082 \</span><br><span class="line">         -v /var/lib/filebrowser:/config \</span><br><span class="line">         -v /media:/myfiles \</span><br><span class="line">         --mount type=tmpfs,destination=/tmp \</span><br><span class="line">         80x86/filebrowser:arm64</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文关于安装完荒野无灯N1之后，将原生的qBittorrent和Filebrowser改为Docker版本。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="7×24" scheme="http://yoursite.com/tags/7%C3%9724/"/>
    
      <category term="N1" scheme="http://yoursite.com/tags/N1/"/>
    
      <category term="NAS" scheme="http://yoursite.com/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>7×24: Jellyfin+Kodi打造个人媒体中心</title>
    <link href="http://yoursite.com/7%C3%9724-Jellyfin-Kodi%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E5%AA%92%E4%BD%93%E4%B8%AD%E5%BF%83/"/>
    <id>http://yoursite.com/7%C3%9724-Jellyfin-Kodi%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E5%AA%92%E4%BD%93%E4%B8%AD%E5%BF%83/</id>
    <published>2020-03-09T21:49:10.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>「一台<strong>7×24</strong>小时运行的电脑可以用来做什么？」系列第二篇。作为一个数字收集癖和整理癖患者，从十几年前在VeryCD上用迅雷慢慢下载TLF组的奥斯卡全集，几KB的速度下几周，到现在对比不同的压制组作品的质量，千兆的网络压得磁盘跟不上下载速度，硬盘容量存不下想要收藏的电影。回望过去，观看的速度永远跟不上下载的速度，甚至现在都不再需要下载再看了，这个过程见证了一段网络、影视、数码的发展历史。</p><a id="more"></a><h2 id="Docker安装Jellyfin"><a href="#Docker安装Jellyfin" class="headerlink" title="Docker安装Jellyfin"></a>Docker安装Jellyfin</h2><blockquote><p>Jellyfin is the volunteer-built media solution that puts <em>you</em> in control of your media. Stream to any device from your own server, with no strings attached. Your media, your server, your way.</p></blockquote><p>Jellyfin的功能简单来说就是作为媒体服务器，统一管理影片，它的界面是这样的：</p><p><img src="https://jellyfin.org/images/screenshots/home_full.png" alt=""></p><p>相比一堆乱七八糟的文件夹又清晰又高级。</p><p>我使用的主机是N1，搭载了荒野无灯开发的小钢炮ROM，已经自带了Jellyfin，不过更新会比较麻烦，因此重新使用Docker安装。</p><p>首先禁用自带的jellyfin：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 禁用启动项</span></span><br><span class="line">mv /etc/init.d/S99jellyfin /etc/S99jellyfin.disabled</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭运行的jellyfin</span></span><br><span class="line">killall jellyfin</span><br></pre></td></tr></table></figure><p>我使用的是docker镜像是<code>jellyfin/jellyfin:nightly</code>。</p><p>新建Container，端口映射8096/tcp，然后设置/cache，/media和/config三个分区即可。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/dockerjellyfin.png" alt=""></p><p>使用指令一键安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8096:8096 -v /your/config:/config -v /your/media:/media -v /your/cache:/cache jellyfin/jellyfin:nightly</span><br></pre></td></tr></table></figure><p>此外，也可以采用<code>linuxserver/jellyfin</code>的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker create \</span><br><span class="line">  --name=jellyfin \</span><br><span class="line">  -e PUID=$(id -u jellyfin) \</span><br><span class="line">  -e PGID=$(cat /etc/group | grep -e '^users' | cut -d':' -f3) \</span><br><span class="line">  -e TZ=Europe/London \</span><br><span class="line">  -e UMASK_SET=022 `#optional` \</span><br><span class="line">  -p 8096:8096 \</span><br><span class="line">  -p 8920:8920 `#optional` \</span><br><span class="line">  -v /path/to/library:/config \</span><br><span class="line">  -v /path/to/tvseries:/data/tvshows \</span><br><span class="line">  -v /path/to/movies:/data/movies \</span><br><span class="line">  -v /opt/vc/lib:/opt/vc/lib `#optional` \</span><br><span class="line">  --device /dev/dri:/dev/dri `#optional` \</span><br><span class="line">  --device /dev/vchiq:/dev/vchiq `#optional` \</span><br><span class="line">  --device /dev/video10:/dev/video10 `#optional` \</span><br><span class="line">  --device /dev/video11:/dev/video11 `#optional` \</span><br><span class="line">  --device /dev/video12:/dev/video12 `#optional` \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  linuxserver/jellyfin</span><br></pre></td></tr></table></figure><p>更详细的安装过程也可以参考这篇<a href="https://post.smzdm.com/p/a6lnxg3g/" target="_blank" rel="noopener">教程</a>。</p><h2 id="整理电影资料库"><a href="#整理电影资料库" class="headerlink" title="整理电影资料库"></a>整理电影资料库</h2><p>把混乱的影片文件夹变成精美的海报墙，就需要去获取包括海报、同人画、片名、年份、剧情介绍、演员等等信息，称为「元数据」。</p><h3 id="使用Jellyfin自带的元数据下载器"><a href="#使用Jellyfin自带的元数据下载器" class="headerlink" title="使用Jellyfin自带的元数据下载器"></a>使用Jellyfin自带的元数据下载器</h3><p>元数据下载器可以将电影信息从TheMovieDb等网站中自动下载下来，只需要在添加媒体库的时候，勾选元数据下载器：</p><p><img src="http://q6735zi7x.bkt.clouddn.com/jellyfinmetadata.png" alt=""></p><p>除了自带的几个元数据下载器之外，还可以添加插件，如AniDB让其支持更多的影片数据网站。</p><p>如果片名识别出错，可以<code>右击-「识别」</code>输入片名搜索。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/jellyfin.png" alt=""></p><h3 id="tinyMediaManager"><a href="#tinyMediaManager" class="headerlink" title="tinyMediaManager"></a>tinyMediaManager</h3><p>Jellyfin的元数据下载能力并不能让人满意。tinyMediaManager是一款非常优秀的元数据下载器，支持Windows、macOS和Linux。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/tmm.png" alt=""></p><p>在<a href="http://release.tinymediamanager.org/" target="_blank" rel="noopener">官网</a>下载最新版，解压后运行tinyMediaManagerUpd.exe打开。在<code>「设置」-「电影」-「媒体库目录」</code>和<code>「设置」-「电视节目」-「媒体库目录」</code>中添加媒体文件夹，点击上方的<code>「更新源」-「更新数据源」</code>，然后全选所有电影，右击选择<code>「搜索并刮削所选电影 - 自动匹配」</code>。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/tmm1.png" alt=""></p><p><img src="http://q6735zi7x.bkt.clouddn.com/tmm2.png" alt=""></p><p>元数据将被保存为nfo文件和图片文件，Jellyfin会自动识别这些文件。</p><h3 id="R18-WARNING"><a href="#R18-WARNING" class="headerlink" title="R18 WARNING"></a>R18 WARNING</h3><p>我并没有收集X片的习惯，只是<del>出于好玩</del>尝试了一下用Jellyfin管理迷片。Pockies同学撰写了<strong>2篇</strong>非常详细可靠的文章：</p><blockquote><p><strong>Pockies</strong> - <a href="https://pockies.github.io/2020/01/09/av-data-capture-jellyfin-kodi/" target="_blank" rel="noopener"><em>利用AV Data Capture+Jellyfin+Kodi打造更优雅的本地AV（毛片）+普通影片媒体库</em></a><br><strong>Pockies</strong> - <a href="https://pockies.github.io/2019/03/25/everaver-emby-kodi/" target="_blank" rel="noopener"><em>利用EverAver+Emby+Kodi打造本地AV（毛片）媒体库</em></a></p></blockquote><p>和正经影片电视唯一的不同只有Capture Data（或者叫刮削），因为目前没有适用于迷片的Jellyfin的刮削插件，因此我们需要手动将迷片的信息，包括演员、车牌号、名称、剧情介绍和封面设置好。当然这个手动不是自己去网上收集，而是使用一些<strong>爱心人士</strong>开发的小软件将信息保存在NFO文件和JPG文件中，供Jellyfin识别。具体的使用方式就参考Pockies同学的文章吧。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/R18Library.png" alt=""></p><p>在Jellyfin中设置完片库之后，可以设置一张自定义的封面：</p><p><img src="http://q6735zi7x.bkt.clouddn.com/R18Cover.png" alt=""></p><p><img src="http://q6735zi7x.bkt.clouddn.com/R18Cover2.png" alt=""></p><h2 id="Kodi-Jellyfin插件"><a href="#Kodi-Jellyfin插件" class="headerlink" title="Kodi + Jellyfin插件"></a>Kodi + Jellyfin插件</h2><p>除了在网页上直接播放外，Kodi的Jellyfin插件可以提供更好的观看体验，尤其是在Android电视盒子上。</p><p>在<a href="https://github.com/jellyfin/jellyfin-kodi/releases" target="_blank" rel="noopener">GitHub</a>下载最新的Jellyfin插件（不用解压），打开Kodi，插件-从ZIP文件安装-选择jellyfin-kodi-xxx.zip。安装成功后按照引导操作即可。</p><p>为了让插件自动同步服务器的媒体内容，可以在Jellyfin服务器安装Kodi Sync Quene插件，同时在Kodi的Jellyfin插件设置中打开Sync-Enable Kodi Sync Queue</p><p><img src="http://q6735zi7x.bkt.clouddn.com/Kodi+Jellyfin.png" alt=""></p><p>Enjoy now!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「一台&lt;strong&gt;7×24&lt;/strong&gt;小时运行的电脑可以用来做什么？」系列第二篇。作为一个数字收集癖和整理癖患者，从十几年前在VeryCD上用迅雷慢慢下载TLF组的奥斯卡全集，几KB的速度下几周，到现在对比不同的压制组作品的质量，千兆的网络压得磁盘跟不上下载速度，硬盘容量存不下想要收藏的电影。回望过去，观看的速度永远跟不上下载的速度，甚至现在都不再需要下载再看了，这个过程见证了一段网络、影视、数码的发展历史。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="7×24" scheme="http://yoursite.com/tags/7%C3%9724/"/>
    
      <category term="N1" scheme="http://yoursite.com/tags/N1/"/>
    
      <category term="NAS" scheme="http://yoursite.com/tags/NAS/"/>
    
      <category term="Jellyfin" scheme="http://yoursite.com/tags/Jellyfin/"/>
    
      <category term="Kodi" scheme="http://yoursite.com/tags/Kodi/"/>
    
      <category term="媒体中心" scheme="http://yoursite.com/tags/%E5%AA%92%E4%BD%93%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>安装户外监控系统小记 | 无预埋线 | NAS录像机</title>
    <link href="http://yoursite.com/%E5%AE%89%E8%A3%85%E6%88%B7%E5%A4%96%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E5%B0%8F%E8%AE%B0%E6%97%A0%E9%A2%84%E5%9F%8B%E7%BA%BFNAS%E5%BD%95%E5%83%8F%E6%9C%BA/"/>
    <id>http://yoursite.com/%E5%AE%89%E8%A3%85%E6%88%B7%E5%A4%96%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E5%B0%8F%E8%AE%B0%E6%97%A0%E9%A2%84%E5%9F%8B%E7%BA%BFNAS%E5%BD%95%E5%83%8F%E6%9C%BA/</id>
    <published>2020-03-05T14:31:28.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<img src="http://q6735zi7x.bkt.clouddn.com/static/images/hikvision.png"><p>因为疫情而被封在家里，就着手去改善一些居家体验（顺便玩）。当时装修的时候预埋了监控线但没有安装，想着干脆自己动手吧。安装的过程一波三折，最终算是圆满完成，记录一下分享给大家。</p><a id="more"></a><p>起初，一检查，没想到这预留的三路监控线居然是带电源的模拟线，这个时代再去使用模拟摄像头实在是心有不甘，拉POE明线肯定是不能接受的，所以综合考虑还是使用WiFi摄像头。</p><p>因为画质要求不高，1080P，差不多看得清就行，就选择了最便宜的海康威视小筒DS-IPC-E22H-IW。因为本来埋的模拟线带有两根电源线，所以如果能利用一下这两根电源线的话，就能集中供电。不过花了半天剥线，把摄像头原装的电源剪了接起来，电却怎么也不通，估计是预埋的线太差了或者中间断了。</p><h2 id="空调插座取电"><a href="#空调插座取电" class="headerlink" title="空调插座取电"></a>空调插座取电</h2><p>没有网还行，没有电这可麻烦了，思忖再三，目光逐渐聚焦在了空调孔上——能不能从空调插座取电，把摄像头装在空调孔外侧呢？</p><p>一般来说，空调这种16A的大电器是要单独一路的，不过摄像头功率都在10W之类，在空调插座再取一个10A的二孔插座应该也无妨。</p><p>买了一个10A的二孔模块，和16A插座并联换上：</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/Airconditioningsocket.png"><p>因为此处需要安装两台监控，所以再购入了一个一转三的迷你扩展插座孔，就能解决问题了。</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/Expansionsocket.png"><h2 id="NAS存储录像"><a href="#NAS存储录像" class="headerlink" title="NAS存储录像"></a>NAS存储录像</h2><p>海康的Wifi摄像头是可以每台单独插卡的，但是正好家庭网络中有接入SMB协议的硬盘，平时是用来存电影的，利用SMB协议存储所有的视频文件是更具性价比的选择。</p><p>下载Windows端的萤石工作室，登录萤石云账号，点击左下角“设备管理”：</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/Equipmentmanagement.png"><p>点击“高级配置”，在“系统”-“常用”中把每台摄像头设置成不同的设备号：</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/Equipmentname.png"><p>在“存储”-“NAS”中设置所要存储录像文件的NAS分区的信息：</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/NASsettings.png"><p>注意，海康威视摄像头要求使用<strong>硬盘的整个分区</strong>，因此需要提前对硬盘进行分区，起初我设置了类似于<code>/dev/sda1/camera/</code>这样的目录，但是始终通不过测试，修改了Samba协议的配置，把用来存录像的分区的分享名设置为Camera，大致流程如下：</p><ol><li>SSH登录NAS</li><li>备份SMB配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;opt&#x2F;etc&#x2F;samba&#x2F;smb.conf &#x2F;opt&#x2F;etc&#x2F;samba&#x2F;smb.conf.bak</span><br></pre></td></tr></table></figure><ol start="3"><li>在smb.conf最后添加：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Camera]</span><br><span class="line">path &#x3D; &#x2F;mnt&#x2F;media_rw&#x2F;482C42E92C42D21C #根据硬盘的分区调整</span><br><span class="line">writeable &#x3D; yes</span><br><span class="line">browseable &#x3D; yes</span><br><span class="line">available &#x3D; yes</span><br></pre></td></tr></table></figure><ol start="4"><li>重启SMB</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Smbcontrol smbd reload-config</span><br></pre></td></tr></table></figure><p>再在海康威视中配置NAS信息，在“存储”-“常用”页面格式化硬盘即可（多台摄像头只需要格式化一次）：</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/format.png"><p>至此设置就完成了。</p><h2 id="固件问题"><a href="#固件问题" class="headerlink" title="固件问题"></a>固件问题</h2><p>但是理论上海康的摄像头是可以直接在浏览器中设置的——在路由器中查看摄像头的IP，使用Windows的IE或macOS的Safari登录后台，但是却收到了这个错误：</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/cameraerror.png"><p>摄像头硬件是DS-IPC-E22H-IW/IWT，固件版本5.5.93，官网上最新的固件也是这个。后台不能访问的问题咨询了客服，要到了5.5.96的固件，是20年01月20日的最新版本，所有DS-IPC-E系列的固件通用（链接: <a href="https://pan.baidu.com/s/1x2193nxHoId-6XK9yRsJwg" target="_blank" rel="noopener">https://pan.baidu.com/s/1x2193nxHoId-6XK9yRsJwg</a> 提取码: eq42）。</p><p>用萤石工作室更新固件后就能访问后台了，用户名admin，密码Hik+机身上的6位验证码。</p><p>不过DS-IPC-E22H-IW版本在更新了这个固件之后出现了夜晚画面昏暗的问题，可能是测试版固件不完善。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://q6735zi7x.bkt.clouddn.com/static/images/hikvision.png&quot;&gt;

&lt;p&gt;因为疫情而被封在家里，就着手去改善一些居家体验（顺便玩）。当时装修的时候预埋了监控线但没有安装，想着干脆自己动手吧。安装的过程一波三折，最终算是圆满完成，记录一下分享给大家。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="监控" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="海康威视" scheme="http://yoursite.com/tags/%E6%B5%B7%E5%BA%B7%E5%A8%81%E8%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>30分钟建立一个作品集网站 powered by Hugo</title>
    <link href="http://yoursite.com/30%E5%88%86%E9%92%9F%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E4%BD%9C%E5%93%81%E9%9B%86%E7%BD%91%E7%AB%99-powered-by-HUGO/"/>
    <id>http://yoursite.com/30%E5%88%86%E9%92%9F%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E4%BD%9C%E5%93%81%E9%9B%86%E7%BD%91%E7%AB%99-powered-by-HUGO/</id>
    <published>2020-02-29T11:25:06.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看到猪场的暑期实习开始“招标”了，头上划过几道黑线。赋闲在家快一个半月，简历和作品集都没有好好准备。上次用Hexo重建了这个Blog的时候，看到了很好看的Hugo博客，还有一个<a href="https://github.com/liuzc/LeaveIt" target="_blank" rel="noopener">LeaveIt</a>主题非常可爱，就心水不已。翻了翻Hugo的Theme页面，好看的真不少，可能是英语用户比较多吧:)</p><a id="more"></a><img src="http://q6735zi7x.bkt.clouddn.com/static/images/LeaveIt.png"><p>干脆单独建一个项目，拿Hugo把作品集重建一下吧，之后有时间的话，会尝试做一版自己的主题将Blog和Portfolio整合在一起。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li><p>Windows 10</p></li><li><p>装好Chocolatey </p></li></ul><h2 id="安装Hugo和初始化"><a href="#安装Hugo和初始化" class="headerlink" title="安装Hugo和初始化"></a>安装Hugo和初始化</h2><p>在各种平台的安装放在<a href="https://gohugo.io/getting-started/installing" target="_blank" rel="noopener">看这里</a>，因为我装好了Chocolatey ，所以直接一步执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choco install hugo -confirm</span><br></pre></td></tr></table></figure><p>输入命令检查是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure><p>进入一个想要放Hugo文件夹的目录，Shift+右键打开PowerShell，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new site portfolio <span class="comment"># 站点名称</span></span><br></pre></td></tr></table></figure><img src="http://q6735zi7x.bkt.clouddn.com/static/images/installhugo.jpg"><p>这样Hugo会自动创建一个名为portfolio的文件夹，里面包含了站点所需的所有文件：</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/hugo.jpg"><h2 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h2><p>可以在<a href="https://themes.gohugo.io/" target="_blank" rel="noopener">Hugo Themes</a>中找到数百款不同风格的Hugo主题，还可以根据站点的类型选择Tag。在portfolio标签下面意外发现了我之间使用的Bootstrap主题<a href="https://themes.gohugo.io/freelancer/" target="_blank" rel="noopener">Freelancer</a> :)</p><p>B站UP <a href="https://space.bilibili.com/19526512" target="_blank" rel="noopener">TenGuSan</a> 提过，作品集需要适配手机的屏幕和比例，最基本的一点就是不能要求阅读者ZOOM IN &amp; OUT。题外话，这个角度上，小红书的缩放功非常优秀。</p><img title="Photo by Kate Torline on Unsplash" src="http://q6735zi7x.bkt.clouddn.com/static/images/kate-torline-VeiqoYAEeis-unsplash.jpg"><p>我找到了两款比较符合自己喜好的：</p><p><a href="https://themes.gohugo.io/hugo-creative-portfolio-theme/" target="_blank" rel="noopener">Creative portfolio</a>会相对更加简洁一点。</p><img title="Creative portfolio" src="http://q6735zi7x.bkt.clouddn.com/static/images/screenshot-hugo-creative-portfolio-theme_huae92bd9f36dca86a00d2df27da4a735b_565314_1500x1000_fill_catmullrom_top_2"><p><a href="https://themes.gohugo.io/parsa-hugo-personal-blog-theme/" target="_blank" rel="noopener">Parsa Hugo</a>可以展示重点项目、Instagram照片，完全可以用来当作一个完整的Blog。</p><img title="Parsa Hugo" src="http://q6735zi7x.bkt.clouddn.com/static/images/screenshot-parsa-hugo-personal-blog-theme_hu221e51f5dc506473d05b0e369ddfdb5d_1712445_1500x1000_fill_catmullrom_top_2.png"><p>选择自己喜欢的Theme，找到Git地址，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd .\portfolio\</span><br><span class="line">git init</span><br><span class="line">git submodule add https:&#x2F;&#x2F;github.com&#x2F;kishaningithub&#x2F;hugo-creative-portfolio-theme.git themes&#x2F;creative</span><br></pre></td></tr></table></figure><p>主题已经下载到themes/Creative文件夹下了，将<code>portfolio\themes\creative\exampleSite</code>中的所有文件复制到<code>portfolio\</code>目录中（复制并替换），打开根目录的配置文件config.toml，将<code>theme = &quot;hugo-creative-portfolio-theme&quot;</code>修改为<code>theme = &quot;creative&quot;</code>。</p><p>运行命令便可以在<a href="http://localhost:1313/" target="_blank" rel="noopener">http://localhost:1313/</a>中访问这个Sample Site了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo server</span><br></pre></td></tr></table></figure><h2 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h2><p>我们还是使用GitHub Pages作为托管服务器。直接运行<code>hugo</code>命令，就会创建public文件夹，里面就是这个静态网站所有的文件了，像此前hexo教程中一样，直接push这个文件夹到Github的username.github.io就可以访问了。</p><p>但是会有两个问题：</p><ol><li>我已经使用了username.github.io托管Hexo的博客了，如何创建第二个静态网站？</li><li>能否把整个hugo的项目上传到GitHub托管？</li></ol><p>我们先解决第一个问题。虽然GitHub只允许创建一个Github个人主页，也就是之前使用username.github.io，但是对于项目主页是不限数量的，在没有兹定于域名的情况下，项目主页的访问链接是username.github.io/projectname（作为过渡方案，这个域名对我来说完全OK啊）</p><p>那么，在GitHub创建名为portfolio的项目，获得Git地址<code>git@github.com:Igloo302/portfolio.git</code></p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/Hugogithub.jpg"><p>打开配置文件，将<code>baseurl = &quot;https://example.org/&quot;</code>修改为<code>baseurl = &quot;https://igloo302.github.io/portfolio/&quot;</code>，然后将public文件夹push到这个空间就可以通过<code>Igloo302.github.io/portfolio</code>访问了，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd public</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;init commit&quot;</span><br><span class="line">git remote add origin git@github.com:Igloo302&#x2F;portfolio.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>把整个项目文件上传到GitHub也并不困难。</p><p>参考<a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/" target="_blank" rel="noopener">Hugo官方文档</a>，有两种方法可以让Github托管整个项目文件的同时支持打开其中子文件的静态页面。</p><ol><li>将静态页面放在<code>/docs</code>的子目录中</li><li>单独建立一个<code>gh-pages branch</code>存储静态页面的内容</li></ol><p>第二种方式相对比较繁琐，我们采用第一种方法。打开配置文件config.toml，添加行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publishDir &#x3D; &quot;docs&quot;</span><br></pre></td></tr></table></figure><p>回到portfolio的根目录，删除public文件夹，输入命令hugo，静态页面将创建在docs子目录中。运行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;init commit&quot;</span><br><span class="line">git remote add origin git@github.com:Igloo302&#x2F;portfolio.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>在GitHub的设置中按照下图设置：</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/githubsetting.jpg"><p>注意：Docs文件夹作为Docs的方法仅适用于利用项目页面（username.github.io/projectname）的情况，如果使用的是个人主页username.github.io，只允许老老实实在Master分支中上传静态网站的所有文件：</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/GithubPageMaster.png"><h2 id="创建作品页面"><a href="#创建作品页面" class="headerlink" title="创建作品页面"></a>创建作品页面</h2><h3 id="新建MD"><a href="#新建MD" class="headerlink" title="新建MD"></a>新建MD</h3><p>编辑<code>themes\creative\archetypes\archetypes\portfolio.md</code>，将其修改为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+++</span><br><span class="line">title = "&#123;&#123; replace .Name "-" " " | title &#125;&#125;"</span><br><span class="line">date = &#123;&#123; .Date &#125;&#125;</span><br><span class="line">showonlyimage = false</span><br><span class="line">draft = false</span><br><span class="line">image = ""</span><br><span class="line">weight = 0</span><br><span class="line">+++</span><br></pre></td></tr></table></figure><p>输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new portfolio&#x2F;first-portfolio.md</span><br></pre></td></tr></table></figure><p>Hugo会自动以<code>archetypes/portfolio.md</code>为模板在<code>content/portfolio</code>目录下生成一篇名为<code>first-portfolio.md</code>的草稿。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 生成静态网页</span><br><span class="line">hugo </span><br><span class="line"></span><br><span class="line"># 本地预览</span><br><span class="line">hugo server -D # 显示草稿</span><br><span class="line"></span><br><span class="line"># 改变文章draft状态：</span><br><span class="line">hugo undraft content&#x2F;portfolio&#x2F;*.md</span><br><span class="line"></span><br><span class="line"># Git部署</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;commit&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="额外功能"><a href="#额外功能" class="headerlink" title="额外功能"></a>额外功能</h2><h3 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h3><p>和Hexo一样获取视频的iframe html代码，直接复制到MD文件中，但是运行时却被渲染成了<code>&lt;!-- raw HTML omitted --&gt;</code>。尝试了使用自定义Bilibili的Shortcode的方法可以正常添加视频。</p><p>在<a href="https://discourse.gohugo.io/t/raw-html-getting-omitted-in-0-60-0/22032" target="_blank" rel="noopener">Raw HTML getting omitted in 0.60.0</a>找到了这个问题的原因：Hugo的默认MD渲染器goldmark的默认设置中禁止了unsafe的html代码，在配置文件中增加以下行就能解决问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[markup]</span><br><span class="line">  [markup.goldmark]</span><br><span class="line">    [markup.goldmark.renderer]</span><br><span class="line">      unsafe &#x3D; true</span><br></pre></td></tr></table></figure><p>使用Shortcode可以让MD更加清晰简洁，用Shortcode添加Bilibili视频，需要在\layouts\shortcodes目录创建bilibili.html文件，内容为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">sbrxp</span> <span class="attr">src</span>=<span class="string">"//player.bilibili.com/player.html?aid=&#123;&#123; .Get "</span><span class="attr">aid</span>" &#125;&#125;&amp;<span class="attr">cid</span>=<span class="string">&#123;&#123;</span> <span class="attr">.Get</span> "<span class="attr">cid</span>" &#125;&#125;&amp;<span class="attr">page</span>=<span class="string">1</span>" <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span> <span class="attr">style</span>=<span class="string">"width: 640px; height: 430px; max-width: 100%"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在.md调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&lt; bilibili aid&#x3D;&quot;xxxxxx&quot; cid&#x3D;&quot;xxxxxx&quot; &gt;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="To-Be-Done"><a href="#To-Be-Done" class="headerlink" title="To Be Done"></a>To Be Done</h2><ul><li>Hugo配置</li><li><a href="https://igloo302.github.io/portfolio" target="_blank" rel="noopener">https://igloo302.github.io/portfolio</a>会被重定向到<a href="https://igloo302.github.io/portfolio/portfolio/" target="_blank" rel="noopener">https://igloo302.github.io/portfolio/portfolio/</a>看着非常别扭。</li><li>图床 PicGo</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://zhuanlan.zhihu.com/p/37752930" target="_blank" rel="noopener">如何使用Hugo在GitHub Pages上搭建免费个人网站</a></p><p><a href="http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/#%E6%80%BB%E7%BB%93" target="_blank" rel="noopener">单个GitHub帐号下添加多个GitHub Pages的相关问题</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天看到猪场的暑期实习开始“招标”了，头上划过几道黑线。赋闲在家快一个半月，简历和作品集都没有好好准备。上次用Hexo重建了这个Blog的时候，看到了很好看的Hugo博客，还有一个&lt;a href=&quot;https://github.com/liuzc/LeaveIt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeaveIt&lt;/a&gt;主题非常可爱，就心水不已。翻了翻Hugo的Theme页面，好看的真不少，可能是英语用户比较多吧:)&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="作品集" scheme="http://yoursite.com/tags/%E4%BD%9C%E5%93%81%E9%9B%86/"/>
    
      <category term="建站" scheme="http://yoursite.com/tags/%E5%BB%BA%E7%AB%99/"/>
    
      <category term="Hugo" scheme="http://yoursite.com/tags/Hugo/"/>
    
  </entry>
  
  <entry>
    <title>会员的诞生</title>
    <link href="http://yoursite.com/%E4%BC%9A%E5%91%98%E7%9A%84%E8%AF%9E%E7%94%9F/"/>
    <id>http://yoursite.com/%E4%BC%9A%E5%91%98%E7%9A%84%E8%AF%9E%E7%94%9F/</id>
    <published>2020-02-28T12:07:31.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<img src="http://q6735zi7x.bkt.clouddn.com/static/images/reserved-unsplash.jpg"><blockquote><p>Photo by <a href="https://unsplash.com/@aquartey_?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Alfred Quartey</a> on <a href="https://unsplash.com/s/photos/vip-club?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText" target="_blank" rel="noopener">Unsplash</a></p></blockquote><p>在笔记本中翻到一些之前思考会员制的段落，拿出来再思考并总结一下。说来也巧，此前的记录时间是19年5月5日，这半年里，会员制商超Costco在上海落地，淘宝的88超级会员玩起了活动降门槛，视频网站在庆余年做SSVIP被网友吐槽，会员似乎已经变味了，那么，究竟什么是会员，会员到底在玩什么？</p><a id="more"></a><p>如果我们用商品是否定期需要（稳定的复购）和商品的价格波动幅度来区分我们的消费行为，一个普通城市年轻人大致如下：</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/VIP-Good.jpg"><p>当然每个人的需求都是有所不同的，对于一个音乐爱好者来说，购买音乐就可能变成定期需要的。总体上，不难看出，我们生活大部分的需要都集中在第一三四象限，强定期需要同时强价格不稳定的商品是很少的。</p><h2 id="普通用户：商品单次购买"><a href="#普通用户：商品单次购买" class="headerlink" title="普通用户：商品单次购买"></a>普通用户：商品单次购买</h2><p>本质：金钱商品（物品和内容）的简单交换</p><p>价值：用户获得商品，商家获得现金</p><p>商品特性：适用于任何商品</p><p>e.g. </p><p>​    戏院看戏，买袋苹果，王者荣耀会员获得永久皮肤</p><h2 id="基础会员：长期购买关系"><a href="#基础会员：长期购买关系" class="headerlink" title="基础会员：长期购买关系"></a>基础会员：长期购买关系</h2><p>本质：内容访问权限、物品使用权的定期购买，在这种长期的购买关系上建立最初的会员</p><p>价值：用户获得商品的稳定价值和购买便利性，商家获得稳定现金流</p><p>商品特性：定期需要，价值稳定（稳定是必要的，这是书籍和杂志的区别，否则难以控制成本和定价，但是这也会导致内容/商品是平均主义的，也就是付一样的钱=得一样的东西）</p><p>e.g. </p><p>​    虚拟商品：功能会员，如QQ会员、视频网站会员的去广告功能</p><p>​    非虚拟商品：订杂志报纸，订牛奶，BlackSocks，Amazon Prime的加速配送</p><h2 id="会员制的修正"><a href="#会员制的修正" class="headerlink" title="会员制的修正"></a>会员制的修正</h2><h3 id="第一重修正：薄利多销"><a href="#第一重修正：薄利多销" class="headerlink" title="第一重修正：薄利多销"></a>第一重修正：薄利多销</h3><p>设计：会员获得更多的购买折扣</p><p>本质：用户购买折扣优惠，因低价多次购买</p><p>价值：用户获得优惠，商家获得稳定现金流和更多的销售收入</p><p>商品特性：定期需要的任何商品或商品包</p><p>e.g.</p><p> 淘宝会员，网易严选会员</p><h3 id="第二重修正：超额选择"><a href="#第二重修正：超额选择" class="headerlink" title="第二重修正：超额选择"></a>第二重修正：超额选择</h3><p>设计：对于价值不稳定的内容和物品，将商品量增多，组成“无限的”的内容包、物品包，迫使总体价值形成超额稳定状态。</p><p>本质：真正贩卖的是用户的选择权，比如花10块钱，就能观看片库中任意电影，而五块钱只能选择其中的一部观看。自助餐也可以认为是为期一顿饭的会员。</p><p>价值：总体上用户获得更多选择权，商家获得稳定现金流</p><p>商品特性：价值不稳定的商品</p><p>e.g. </p><p>​    虚拟商品：视频网站会员、Kindle Unlimited、微信读书无限卡</p><p>​    非虚拟商品：仅支持会员消费的零售如Costco</p><h3 id="第三重修正：数值增长"><a href="#第三重修正：数值增长" class="headerlink" title="第三重修正：数值增长"></a>第三重修正：数值增长</h3><p>设计：拥有积分系统，随着用户成为会员后的消费行为数值增长，高等级VIP获得更高的权益。</p><p>本质：游戏化心理；收支相抵的用户分层</p><p>价值：用户获得游戏快感和多次消费的收益，商家获得更多的用户消费收益</p><p>商品特性：发生消费行为的任何商品（定期需要的产品最佳）</p><p>e.g. 所有会员的积分等级系统，淘宝人生</p><h2 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h2><ol><li>会员一定要收费吗？</li><li>VVIP是唯一解吗？</li></ol><hr><p>感觉还有很多漏洞，待续。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;http://q6735zi7x.bkt.clouddn.com/static/images/reserved-unsplash.jpg&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&quot;https://unsplash.com/@aquartey_?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Alfred Quartey&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/s/photos/vip-club?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在笔记本中翻到一些之前思考会员制的段落，拿出来再思考并总结一下。说来也巧，此前的记录时间是19年5月5日，这半年里，会员制商超Costco在上海落地，淘宝的88超级会员玩起了活动降门槛，视频网站在庆余年做SSVIP被网友吐槽，会员似乎已经变味了，那么，究竟什么是会员，会员到底在玩什么？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="产品" scheme="http://yoursite.com/tags/%E4%BA%A7%E5%93%81/"/>
    
      <category term="商业" scheme="http://yoursite.com/tags/%E5%95%86%E4%B8%9A/"/>
    
      <category term="会员" scheme="http://yoursite.com/tags/%E4%BC%9A%E5%91%98/"/>
    
      <category term="闲谈" scheme="http://yoursite.com/tags/%E9%97%B2%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>从WordPress迁移到GitHub Pages：Hexo建站记录</title>
    <link href="http://yoursite.com/%E4%BB%8EWordPress%E8%BF%81%E7%A7%BB%E5%88%B0Github-Pages-Hexo%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/%E4%BB%8EWordPress%E8%BF%81%E7%A7%BB%E5%88%B0Github-Pages-Hexo%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/</id>
    <published>2020-02-25T15:22:56.000Z</published>
    <updated>2020-03-19T02:02:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>年纪渐长，记忆的衰退有时并不是生理性的。要往脑子里塞的东西越来越多，越来越奇形怪状，有效就没法好好放进去了。只能留一点，放一点。于是难免有漏网之鱼。到后来就觉得可惜。</p><p>老戴说，社交网络很难作为自己的记忆留存，的确，碎片化的转评赞，只能用来让“别人”来窥探一个不完整的自己。我有一个完整的叙述在几个庞大又缺乏整理的OneNote笔记本里，作为知识的采集和消化，这绰绰有余，但作为输出和理解，这远远不够。</p><a id="more"></a><p>这个站其实16年或者更早就有了，写些乱七八糟的东西，也不管自己的文笔是多么糟糕了。但是Lost Years之后手愈加生了。我自知不是一个很好的创作者，和16 personalities的结论恰恰相反。但是从意愿上来说，讲述是一件让人愉快的事情。</p><p>言归正传，本文记录一下自己如何把之前的WordPress迁移到GitHub Pages并用Hexo建站和简单调试的过程，以供自己未来查阅，注意，此非教程，但如若对读者有些帮助，也不赖。</p><hr><p>之前的写过一些文章，拍过几张照片，都存在了一个搭建在VPS的WordPress上，相比GitHub Pages来说麻烦不少，另外，GitHub虽然访问速度不快，但是至少暂时不会完全被墙。</p><h2 id="WordPress-Export-gt-Markdown"><a href="#WordPress-Export-gt-Markdown" class="headerlink" title="WordPress Export -&gt; Markdown"></a>WordPress Export -&gt; Markdown</h2><p>从WordPress我们可以<a href="https://wordpress.org/support/article/tools-export-screen/" target="_blank" rel="noopener">导出XML文件</a>，里面包含了所有的Posts。使用<a href="https://github.com/lonekorean/wordpress-export-to-markdown" target="_blank" rel="noopener">wordpress-export-to-markdown</a>这个开源工具可以将其转换成适用于静态博客的Markdown以及下载保存文中其中的图片。</p><p>安装依赖<a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>，以默认设置安装即可，然后在PowerShell运行命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx wordpress<span class="literal">-export</span><span class="literal">-to</span><span class="literal">-markdown</span></span><br></pre></td></tr></table></figure><p>等待脚本下载完成，选择XML文件的路径后就可导出Markdown文件，为了让文章链接更加简洁，Year和Month的文件夹都没有创建。如果之前没有使用图床的话，可以将<code>Save images attached to posts?</code>设为Yes。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/wordpress-export-to-markdown.gif" alt="wordpress-export-to-markdown"></p><h2 id="GitHub-Pages-Hexo"><a href="#GitHub-Pages-Hexo" class="headerlink" title="GitHub Pages + Hexo"></a>GitHub Pages + Hexo</h2><h3 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h3><p>在GitHub创建一个名为”你的GitHub ID.github.io”的repository，即可拥有GitHub提供了免费的静态网站托管空间。</p><h3 id="安装Git和Hexo"><a href="#安装Git和Hexo" class="headerlink" title="安装Git和Hexo"></a>安装Git和Hexo</h3><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>是一个在国内流行的开源建站工具，开发者来自台湾，所以中文支持很好。</p><blockquote><p><em>Hexo</em> is a fast, simple &amp; powerful blog framework powered by Node.js.</p></blockquote><p>虽然Hexo没有像WordPress那样非常宜人，甚至略显臃肿的后台，但是使用起来门槛并不高。</p><p>Node.js我们已经安装好了，直接输入命令安装Hexo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>在等待安装hexo的时候，完成<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>的安装。</p><h3 id="配置SSH-Keys"><a href="#配置SSH-Keys" class="headerlink" title="配置SSH Keys"></a>配置SSH Keys</h3><p>Hexo需要和GitHub的仓库进行通讯，我们需要创建一个SSH Keys密钥对，将公钥交给GitHub用于Git操作时的签名和加密。</p><blockquote><p>不要去硬记。<br>你只要想：既然是加密，那肯定是不希望别人知道我的消息，所以只有我才能解密，所以可得出<strong>公钥负责加密，私钥负责解密</strong>；同理，既然是签名，那肯定是不希望有人冒充我发消息，只有我才能发布这个签名，所以可得出<strong>私钥负责签名，公钥负责验证</strong>。</p><p>_ 匿名用户 <a href="https://www.zhihu.com/question/25912483" target="_blank" rel="noopener">RSA的公钥和私钥到底哪个才是用来加密和哪个用来解密？</a></p></blockquote><p>其他关于公钥和私钥的理解可以看<a href="https://songlee24.github.io/2015/05/03/public-key-and-private-key/" target="_blank" rel="noopener">这篇博文</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成一个新的SSH Key</span></span><br><span class="line">ssh-keygen -t rsa -C "你的邮箱"</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (C:\Users\shenj/.ssh/id_rsa): // 回车</span><br><span class="line">Enter passphrase (empty for no passphrase): // 密码可以为空</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in C:\Users\igloo/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in C:\Users\igloo/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure><p>在 C:\Users\用户名/.ssh/中用记事本打开id_rsa.pub文件，打开GitHub，点击右上角头像 - Setting - SSH and GPG keys，将id_rsa.pub文件中的所有内容复制进去，Title任意设置。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/SSHKey.png" alt=""></p><p>完善以下个人信息</p><figure class="highlight sh"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Igloo302"</span> //GitHub用户名</span><br><span class="line">git config --global user.email  <span class="string">"shenjy302@live.com"</span> //GitHub邮箱</span><br></pre></td></tr></table></figure><p>这样SSH Key就配置完成了。</p><h3 id="搭建Hexo"><a href="#搭建Hexo" class="headerlink" title="搭建Hexo"></a>搭建Hexo</h3><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在电脑里创建任意一个文件夹，用来存放站点文件。在文件夹中空白处右键，选择<code>Git Bash Here</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化Hexo</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装一些依赖包</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>执行后就会创建一个Hexo站点所需的目录，输入以下命令就能浏览器打开localhost:4000预览博客了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>默认的主题Lanscape并不好看，我们可以去<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网</a>或者GitHub上寻找自己喜欢的主题。以<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a>主题为例，克隆主题文件到的themes/next目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><p>根目录下的<code>_config.yml</code>文件包含了所有Hexo的设置，找到theme将其设置为next：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>再运行<code>hexo g</code>和<code>hexo s</code>，新的主题已经生效了。</p><h3 id="恢复WordPress的文章"><a href="#恢复WordPress的文章" class="headerlink" title="恢复WordPress的文章"></a>恢复WordPress的文章</h3><p>把刚刚导出的Markdown文件复制到/source/_posts目录，预览网站，文章已经恢复了，创建的时间也得到了保留。</p><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><p>打开GitHub进入username.github.io仓库，复制SSH地址：</p><p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/copyssh.png" alt="copyssh"></p><p>打开_config.yml，将SSH地址复制到Deloy的repository后面并保存。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:Igloo302/igloo302.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>运行运行<code>hexo g</code>和<code>hexo d</code>，输入SSH密码，站点就被push到GitHub了，浏览username.github.io试试吧。</p><h2 id="插件和设置"><a href="#插件和设置" class="headerlink" title="插件和设置"></a>插件和设置</h2><h3 id="七牛图床"><a href="#七牛图床" class="headerlink" title="七牛图床"></a>七牛图床</h3><p>参考这篇教程：<a href="https://zhuanlan.zhihu.com/p/34747279" target="_blank" rel="noopener">Hexo七牛云图床使用</a>。</p><p>简单来需要这几步：</p><ol><li>注册一个七牛云的对象存储空间</li><li>安装七牛云插件：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-qiniu-sync --save</span><br></pre></td></tr></table></figure><ol start="3"><li>添加插件配置信息到 <code>_config.yml</code>文件中</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#七牛云存储设置</span></span><br><span class="line"><span class="comment">##offline       是否离线. 离线状态将使用本地地址渲染</span></span><br><span class="line"><span class="comment">##sync          是否同步</span></span><br><span class="line"><span class="comment">##bucket        空间名称.</span></span><br><span class="line"><span class="comment">##access_key    上传密钥AccessKey</span></span><br><span class="line"><span class="comment">##secret_key    上传密钥SecretKey</span></span><br><span class="line"><span class="comment">##secret_file   秘钥文件路径，可以将上述两个属性配置到文件内，防止泄露，json格式。绝对路径相对路径均可</span></span><br><span class="line"><span class="comment">##dirPrefix     上传的资源子目录前缀.如设置，需与urlPrefix同步 </span></span><br><span class="line"><span class="comment">##urlPrefix     外链前缀.</span></span><br><span class="line"><span class="comment">##up_host      上传服务器路径,如选择华北区域的话配置为http://up-z1.qiniu.com</span></span><br><span class="line"><span class="comment">##local_dir     本地目录.</span></span><br><span class="line"><span class="comment">##update_exist  是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传)</span></span><br><span class="line"><span class="comment">##image/js/css  子参数folder为不同静态资源种类的目录名称，一般不需要改动</span></span><br><span class="line"><span class="comment">##image.extend  这是个特殊参数，用于生成缩略图或加水印等操作。具体请参考http://developer.qiniu.com/docs/v6/api/reference/fop/image/ </span></span><br><span class="line"><span class="comment">##              可使用基本图片处理、高级图片处理、图片水印处理这3个接口。例如 ?imageView2/2/w/500 即生成宽度最多500px的缩略图</span></span><br><span class="line"><span class="attr">qiniu:</span></span><br><span class="line">  <span class="attr">offline:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sync:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">xxxxx</span></span><br><span class="line">  <span class="comment"># secret_file: sec/qn.json or C:</span></span><br><span class="line">  <span class="attr">access_key:</span> <span class="string">xxxxxxxx</span></span><br><span class="line">  <span class="attr">secret_key:</span> <span class="string">xxxxxxxx</span></span><br><span class="line">  <span class="attr">dirPrefix:</span> <span class="string">static</span></span><br><span class="line">  <span class="attr">urlPrefix:</span> <span class="string">http://xxxxxx.bkt.clouddn.com/static</span></span><br><span class="line">  <span class="attr">up_host:</span> <span class="string">http://upload.qiniu.com</span></span><br><span class="line">  <span class="attr">local_dir:</span> <span class="string">static</span></span><br><span class="line">  <span class="attr">update_exist:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">image:</span> </span><br><span class="line">    <span class="attr">folder:</span> <span class="string">images</span></span><br><span class="line">    <span class="attr">extend:</span> </span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">    <span class="attr">folder:</span> <span class="string">js</span></span><br><span class="line">  <span class="attr">css:</span></span><br><span class="line">    <span class="attr">folder:</span> <span class="string">css</span></span><br></pre></td></tr></table></figure><ol start="4"><li>把需要上传的图片放到Hexo目录 - static - images文件夹</li><li>在文中使用shorcode使用图片</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% qnimg picname.jpg %&#125;</span><br></pre></td></tr></table></figure><p>为了未来迁移更方便，不建议使用七牛云插件，也可以直接使用PicGo获取MD的图片链接，类似：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](http://q6735zi7x.bkt.clouddn.com/portfolio/animal.jpeg)</span><br></pre></td></tr></table></figure><p>Typora可以支持PicGo的调用，配合使用很方便。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>对比了几种评论的方式，基于GitHub Issue的需要GitHub登录才能评论，<a href="www.disqus.com">disqus</a>需要翻墙，基于LeanCloud的无后端评论系统Valine](valine.js.org)应该是比较合适的。</p><p>设置方法<a href="https://www.playpi.org/2019032001.html" target="_blank" rel="noopener">参考</a>：注册LeanCloud并创建应用，在设置-应用 Keys，可以看到应用的 <code>appid</code> 和 <code>appkey</code>，将其填写到Next主题的配置文件中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">SIOuMPbxxxxxzGzoHsz</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">uv74bsFWxxxxV8MIjM</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Mann</span> <span class="string">Tracht,</span> <span class="string">Un</span> <span class="string">Gott</span> <span class="string">Lacht.</span> <span class="comment"># Comment box placeholder 占位符</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span> <span class="comment"># nick,mail,link Custom comment header 需要填写的内容</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">true</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure><blockquote><p>由于Valine 是无后端评论系统，所以也就没有开发评论数据管理功能。请自行登录<code>Leancloud应用</code>管理。</p><p>具体步骤：<code>登录</code>&gt;<code>选择你创建的应用</code>&gt;<code>存储</code>&gt;选择Class <code>Comment</code>，然后就可以尽情的发挥你的权利啦(～￣▽￣)～</p><p>快速开始 - <a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">https://valine.js.org/quickstart.html</a></p></blockquote><h3 id="GitHub托管所有文件"><a href="#GitHub托管所有文件" class="headerlink" title="GitHub托管所有文件"></a>GitHub托管所有文件</h3><p>此前的设置中只把Hexo文件夹Publish目录的静态网页文件上传到了GitHub空间，这对于文件的备份造成了一定的挑战。因此我再创建了一个GitHub Repository来存储所有的文件，细节略。最终效果是可以通过<code>git add . &amp;&amp; git commit -m &#39;Update&#39; &amp;&amp; git push origin master</code>将所有文件上传到名为blog的空间中<del>，同时username.github.io/blog也可以用于访问静态主页（暂未详细考虑）</del>。</p><p>一个不太合理的方式：可以考虑将主题文件夹下的.git删除，以起到将主题文件夹上传的功能。但是这样会对之后主题的升级造成困难，更合理的方法参考<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/DATA-FILES.md" target="_blank" rel="noopener">官方</a>，或者fork主题+submodule。</p><h3 id="自动化部署脚本"><a href="#自动化部署脚本" class="headerlink" title="自动化部署脚本"></a>自动化部署脚本</h3><p>每次Git Bash一堆指令确实有点麻烦，写了一个批处理的脚本（Windows）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"Hexo Deployment"</span></span><br><span class="line"><span class="comment"># "C:\Program Files\Git\bin\sh.exe"  --login -i -c "hexo qiniu sync"</span></span><br><span class="line"><span class="string">"C:\Program Files\Git\bin\sh.exe"</span>  -<span class="literal">-login</span> <span class="literal">-i</span> <span class="literal">-c</span> <span class="string">"hexo g"</span></span><br><span class="line"><span class="string">"C:\Program Files\Git\bin\sh.exe"</span>  -<span class="literal">-login</span> <span class="literal">-i</span> <span class="literal">-c</span> <span class="string">"hexo d"</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">"Push to GitHub"</span></span><br><span class="line">git add . &amp;&amp; git commit <span class="literal">-m</span> <span class="string">'Update'</span> &amp;&amp; git push origin master</span><br></pre></td></tr></table></figure><p>保存成update.bat在Hexo根目录下运行即可（写得比较粗糙，见笑）。</p><h2 id="用Hexo写博文"><a href="#用Hexo写博文" class="headerlink" title="用Hexo写博文"></a>用Hexo写博文</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建新文章</span></span><br><span class="line">hexo new '一篇文章'</span><br></pre></td></tr></table></figure><p>找到/source/_posts目录下的<code>一篇文章.md</code>，就可以写博文了。</p><p>如果不想直接显示，可以先创建草稿再发布：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建草稿</span></span><br><span class="line">hexo new draft '一篇草稿'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发布</span></span><br><span class="line">hexo publish '一篇草稿'</span><br></pre></td></tr></table></figure><p>其他常用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在.md文档中加入 &lt;!-- more --&gt; 可以显示“阅读全文”</span><br></pre></td></tr></table></figure><h2 id="用N1部署Hexo"><a href="#用N1部署Hexo" class="headerlink" title="用N1部署Hexo"></a>用N1部署Hexo</h2><p>经过一段时间的使用，遇到的痛点是Hexo只能在电脑上进行编辑和发布，多平台的体验很差。于是考虑使用一台小主机部署Hexo，这样任何时候都可以连接小主机使用Hexo生成静态网页并发布。</p><p>本节参考了<a href="https://blog.csdn.net/Colton_Null" target="_blank" rel="noopener">喝酒不骑马</a>的<a href="https://blog.csdn.net/Colton_Null/article/details/93805908" target="_blank" rel="noopener">如何搭建自己的博客 - 基于 Hexo + Docker + Nginx + Git + Linux</a>，与之不同，我并不打算让小主机来当静态网站服务器，毕竟国内的主机还需要备案，而且所有设备性能也不高。</p><p>我采用的设备依旧是安装了荒野无灯小钢炮系统的N1，这个系统极度精简，而且自带了Docker，除了不支持Wi-Fi以外几乎没有缺点。所有Linux主机的操作方式都是类似的。</p><p><del>小钢炮自带的SSH软件是dropbear，生成SSH key的方式有所不同。</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@N1:~]# dropbearkey -t rsa -f ~/.ssh/id_rsa</span><br><span class="line">Generating 2048 bit rsa key, this may take a while...</span><br><span class="line">Public key portion is:</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQ......OvWTR/S86OINFETJLOtxwJCMs3kK/NVgrUlQq4rGzwESnwCzahGYzWn8/xCiLKcx4wX0nE8QCvxH6HgFmDo5DScw822jlA8z8++Q4IMv5jX8J root@NanoDisk</span><br><span class="line">Fingerprint: sha1!! eb:d1:b5:f0:9e:72:......9:a9:d2:d2:d8</span><br></pre></td></tr></table></figure><p><del>可以再输入以下命令将公钥保存成文件：</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropbearkey -f ~/.ssh/id_rsa -y &gt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p><del>将公钥添加到GitHub，然后完善个人信息：</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "Igloo302" //GitHub用户名</span><br><span class="line">git config --global user.email  "shenjy302@live.com" //GitHub邮箱</span><br></pre></td></tr></table></figure><p>克隆Blog：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Igloo302&#x2F;blog.git</span><br></pre></td></tr></table></figure><p>安装Docker就省略了，然后我们需要创建Dockerfile。</p><blockquote><p>如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。</p><p>使用 Dockerfile 定制镜像 - <a href="https://yeasy.gitbooks.io/docker_practice/image/build.html" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/image/build.html</a></p></blockquote><p>在某个目录下创建Dockerfile：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir Hexo</span><br><span class="line">cd Hexo</span><br><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM node:latest</span><br><span class="line">MAINTAINER Igloo &lt;shenjy302@live.com&gt;</span><br><span class="line">RUN npm install</span><br><span class="line"><span class="meta">#</span><span class="bash"> install hexo</span></span><br><span class="line">RUN npm install hexo-cli -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> home dir</span></span><br><span class="line">WORKDIR /blog</span><br></pre></td></tr></table></figure><p>定制镜像是以一个镜像为基础，在其上进行定制，<code>FROM</code> 是指定基础镜像。<code>RUN</code> 指令是用来执行命令行命令的。WORKDIR指定了镜像的工作目录。</p><p>在Dockerfile所在文件夹中执行命令（<code>.</code>代表当前目录）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t hexo .</span><br></pre></td></tr></table></figure><p>稍等片刻，名为hexo的定制镜像就创建好了，创建Docker容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 4000:4000 -v /media/Travel/Document/blog:/blog --name hexo hexo</span><br></pre></td></tr></table></figure><p>转发4000端口用于Hexo的预览。</p><p>进入Hexo Docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it hexo /bin/bash</span><br></pre></td></tr></table></figure><p><img src="http://q6735zi7x.bkt.clouddn.com//static/images/hexoDocker.jpg" alt=""></p><p>执行<code>hexo</code>，如果报未安装错误就执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>解决Git问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;shenjy302@live.com&quot;</span><br><span class="line">cat &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub</span><br><span class="line">git config --global user.name &quot;Igloo302&quot; &#x2F;&#x2F;GitHub用户名</span><br><span class="line">git config --global user.email  &quot;shenjy302@live.com&quot; &#x2F;&#x2F;GitHub邮箱</span><br></pre></td></tr></table></figure><p>然后可以开始熟悉的Hexo d愉快玩耍吧。</p><p>为了让部署过程更流畅，写了一个脚本update.sh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">docker exec hexo git pull</span><br><span class="line">docker exec hexo hexo clean</span><br><span class="line">docker exec hexo hexo g</span><br><span class="line">docker exec hexo hexo d</span><br><span class="line">docker exec hexo git add . </span><br><span class="line">docker exec hexo git commit -m 'Update From Docker' </span><br><span class="line">docker exec hexo git push origin master</span><br></pre></td></tr></table></figure><p>在宿主机运行脚本，即可完成部署。</p><p>使用crontab设定自动执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 每二小时发布一次</span><br><span class="line">* *&#x2F;2 * * * sh &#x2F;xxxx&#x2F;update.sh</span><br></pre></td></tr></table></figure><h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><p><a href="http://codewithzhangyi.com/2018/04/19/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%8A%EF%BC%89/" target="_blank" rel="noopener">如何搭建自己的个人网站（上）</a></p><p><a href="https://zhuanlan.zhihu.com/p/92508540" target="_blank" rel="noopener">2019年末，来一发基于Hexo自建博客生态指南！</a></p><p><a href="https://zhuanlan.zhihu.com/p/98570271" target="_blank" rel="noopener">教程 | 一文搭建你的第一个免费专属博客</a></p><p><a href="https://www.vincentqin.tech/posts/build-a-website-using-hexo/" target="_blank" rel="noopener">HEXO建站备忘录</a>g-hexo/)uild-a-website-using-hexo/)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年纪渐长，记忆的衰退有时并不是生理性的。要往脑子里塞的东西越来越多，越来越奇形怪状，有效就没法好好放进去了。只能留一点，放一点。于是难免有漏网之鱼。到后来就觉得可惜。&lt;/p&gt;
&lt;p&gt;老戴说，社交网络很难作为自己的记忆留存，的确，碎片化的转评赞，只能用来让“别人”来窥探一个不完整的自己。我有一个完整的叙述在几个庞大又缺乏整理的OneNote笔记本里，作为知识的采集和消化，这绰绰有余，但作为输出和理解，这远远不够。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="建站" scheme="http://yoursite.com/tags/%E5%BB%BA%E7%AB%99/"/>
    
      <category term="GitHub Pages" scheme="http://yoursite.com/tags/GitHub-Pages/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git网络加速|为Git设置代理</title>
    <link href="http://yoursite.com/Git%E7%BD%91%E7%BB%9C%E5%8A%A0%E9%80%9F-%E4%B8%BAGit%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/Git%E7%BD%91%E7%BB%9C%E5%8A%A0%E9%80%9F-%E4%B8%BAGit%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</id>
    <published>2020-02-25T12:28:52.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git使用，尤其是Clone Github的respository的时候往往慢得令人发指，本文使用了2种方法提高速度。</p><a id="more"></a><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>直接使用SS和V2ray的全局模式并不起作用，需要通过以下方法设置代理。</p><ol><li>打开代理软件，查看本地HTTP监听端口或SOCKS端口</li><li>如果设置全局代理，则所有Git的操作都经过代理：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTP监听端口为1080</span></span><br><span class="line">git config -<span class="literal">-global</span> http.proxy http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span></span><br><span class="line">git config -<span class="literal">-global</span> https.proxy https://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Socks5端口为1086</span></span><br><span class="line">git config -<span class="literal">-global</span> http.proxy socks5://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1086</span></span><br><span class="line">git config -<span class="literal">-global</span> http.proxy socks5://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1086</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消全局代理</span></span><br><span class="line">git config -<span class="literal">-global</span> -<span class="literal">-unset</span> http.proxy</span><br><span class="line">git config -<span class="literal">-global</span> -<span class="literal">-unset</span> https.proxy</span><br></pre></td></tr></table></figure><ol start="3"><li>如果只对GitHub设置代理：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTP监听端口为1080</span></span><br><span class="line">git config -<span class="literal">-global</span> http.https://github.com.proxy https://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span></span><br><span class="line">git config -<span class="literal">-global</span> https.https://github.com.proxy https://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Socks5端口为1086</span></span><br><span class="line">git config -<span class="literal">-global</span> http.https://github.com.proxy socks5://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1086</span></span><br><span class="line">git config -<span class="literal">-global</span> https.https://github.com.proxy socks5://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1086</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消Github代理</span></span><br><span class="line">git config -<span class="literal">-global</span> -<span class="literal">-unset</span> http.https://github.com.proxy</span><br><span class="line">git config -<span class="literal">-global</span> -<span class="literal">-unset</span> https.https://github.com.proxy</span><br></pre></td></tr></table></figure><ol start="3"><li>此代理方法只对HTTP(S)协议有效，无法用于SSH协议，也就是说只能使用<code>git clone https://www.github.com/xxxx/xxxx.git</code></li></ol><h2 id="修改Host"><a href="#修改Host" class="headerlink" title="修改Host"></a>修改Host</h2><h3 id="查询DNS"><a href="#查询DNS" class="headerlink" title="查询DNS"></a>查询DNS</h3><p>使用命令nslookup github.global.ssl.fastly.Net和nslookup github.com查询域名对应的IP</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\&gt;  nslookup github.global.ssl.fastly.Net</span><br><span class="line">服务器:  UnKnown</span><br><span class="line">Address:  <span class="number">192.168</span>.<span class="number">6.2</span></span><br><span class="line"></span><br><span class="line">非权威应答:</span><br><span class="line">名称:    github.global.ssl.fastly.Net</span><br><span class="line">Address:  <span class="number">151.101</span>.<span class="number">129.194</span></span><br><span class="line"></span><br><span class="line">PS C:\Users\&gt;  nslookup github.com</span><br><span class="line">服务器:  UnKnown</span><br><span class="line">Address:  <span class="number">192.168</span>.<span class="number">6.2</span></span><br><span class="line"></span><br><span class="line">非权威应答:</span><br><span class="line">名称:    github.com</span><br><span class="line">Address:  <span class="number">13.229</span>.<span class="number">188.59</span></span><br></pre></td></tr></table></figure><h3 id="修改Host-1"><a href="#修改Host-1" class="headerlink" title="修改Host"></a>修改Host</h3><p>打开host文件，Windows的Host文件在 C:\Windows\System32\drivers\etc\hosts中，Mac和Linux在在/etc/hosts中。在末尾添加两行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">151.101.129.194 github.global.ssl.fastly.net</span><br><span class="line">13.229.188.59 github.com</span><br></pre></td></tr></table></figure><h3 id="刷新DNS缓存"><a href="#刷新DNS缓存" class="headerlink" title="刷新DNS缓存"></a>刷新DNS缓存</h3><p>Linux：</p><p><code>sudo /etc/init.d/networking restart</code></p><p>Windows：</p><p><code>ipconfig /flushdns</code></p><p>macOS：</p><p><code>sudo killall -HUP mDNSResponder</code></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.zhihu.com/question/27159393" target="_blank" rel="noopener">知乎问题：git clone一个github上的仓库，太慢，经常连接失败，但是github官网流畅访问，为什么？</a></p><p><a href="https://www.linuxidc.com/Linux/2019-05/158461.htm" target="_blank" rel="noopener">git clone速度太慢的解决办法（亲测还有效）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git使用，尤其是Clone Github的respository的时候往往慢得令人发指，本文使用了2种方法提高速度。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="代理" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>7×24-斐讯N1的旁路由玩法</title>
    <link href="http://yoursite.com/7%C3%9724-%E6%96%90%E8%AE%AFN1%E7%9A%84%E6%97%81%E8%B7%AF%E7%94%B1%E7%8E%A9%E6%B3%95/"/>
    <id>http://yoursite.com/7%C3%9724-%E6%96%90%E8%AE%AFN1%E7%9A%84%E6%97%81%E8%B7%AF%E7%94%B1%E7%8E%A9%E6%B3%95/</id>
    <published>2020-02-24T14:38:04.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>N1是已经暴雷快两年的斐讯留下来的经典矿渣遗产。2GB RAM，四核心ARM SOC，4K 输出，千兆网口，读写30MB+的USB 2.0，决定了N1绝不甘心当一个吃灰的挖矿机。在一众技术大佬的研究下，N1成功转型为电视盒子、NAS、下载机、高清播放器、复古游戏机，以及本文要介绍的旁路由。</p><a id="more"></a><p>我们平时使用的家用路由器需要负责网关服务器、DHCP服务器、PPPOE拨号、DNS服务器、发射WIFI信号等工作，所谓旁路由（并不是专业的叫法，民间约定俗成）就是把这些功能中的一部分让渡给这台设备去处理。</p><p>大多数的家用路由器的性能都是及其羸弱的，运行去广告、V2Ray、SS这种服务的时候难以发挥出最好的效果，有了一台旁路由，我们就可以把这些高难度任务交给它，让主路由安安心心地拨号、分配IP地址（DHCP）。连接方式如图：</p><p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/%E6%97%81%E8%B7%AF%E7%94%B1%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91.png" alt="旁路由网络拓扑"></p><p>因为这个网络拓扑本质上实现了一次单线复用，所以也适用于弱电箱较小，无法容纳高性能网络设备的情况，比方说我就将N1放在了有网口的书房，同时打开N1的WiFi用于补足书房信号不足的问题。</p><h2 id="所需设备"><a href="#所需设备" class="headerlink" title="所需设备"></a>所需设备</h2><ul><li>正常运行的家庭网络</li><li>斐讯N1</li><li>双公头USB数据线（可使用两根没有的MicroUSB数据线DIY）</li><li>1GB以上U盘或TF卡+读卡器（USB 2.0最佳）</li><li>USB鼠标</li><li>显示器和HDMI线</li><li>刷机包，包括N1降级工具（链接: <a href="https://pan.baidu.com/s/11-7FbdmTDBTcb-qberyQLw" target="_blank" rel="noopener">https://pan.baidu.com/s/11-7FbdmTDBTcb-qberyQLw</a> 提取码: 6h3s）、<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=981406&extra=page%3D1%26filter%3Dtypeid%26typeid%3D21" target="_blank" rel="noopener">OpenWRT固件</a></li><li>Windows或Mac电脑</li></ul><h2 id="N1降级"><a href="#N1降级" class="headerlink" title="N1降级"></a>N1降级</h2><p>如果买到的N1版本高于2.19，则需要将boot、bootloader、recovery降级，简要步骤如下：</p><ol><li>加电开机后用鼠标多次点击版本号，弹出Toast 「打开ADB」。</li><li>将N1连上Wifi或有线网络，记录IP地址</li><li>用双头USB线将N1和电脑相连</li><li>运行T1_N1降级工具v1.1.exe自动降级或手动刷入老版本boot、bootloader、recovery。</li></ol><p>手动刷入方法：</p><ol><li>打开adb所在文件夹，按住Shift同时右键空白处，点击「在此处打开Powershell窗口」</li><li>依次输入以下代码</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># adb连接N1</span></span><br><span class="line">.\adb.exe connect <span class="number">192.168</span>.x.xxx</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 重启到fastboot</span></span><br><span class="line">.\adb.exe reboot fastboot</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 刷入boot、bootloader、recovery</span></span><br><span class="line">fastboot flash boot .\N1\N1boot.img</span><br><span class="line">fastboot flash bootloader .\N1\N1bootloader.img</span><br><span class="line">fastboot flash recovery .\N1\N1recovery.img</span><br></pre></td></tr></table></figure><h2 id="安装OpenWRT"><a href="#安装OpenWRT" class="headerlink" title="安装OpenWRT"></a>安装OpenWRT</h2><p>目前有2种方式安装OpenWRT/LEDE，分别为</p><ol><li>安装Armbian系统，在Docker（可以理解为虚拟机）中安装OpenWRT</li><li>只安装OpenWRT</li></ol><p>同时，两种安装方式都可以通过线刷和U盘刷/卡刷两种方式刷入N1。</p><p>因为笔者不只需要这台旁路由安安静静地负责单纯翻墙和去广告工作，所以选择只安装OpenWRT，固件采用的是flippy编译的<a href="https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=981406&extra=page%3D1%26filter%3Dtypeid%26typeid%3D21" target="_blank" rel="noopener">OP</a>，这个固件编译lean  &amp;  lienol维护的源码。</p><p>下载固件用USB Image Tool刷入U盘，N1重启进入原生的NAS系统，将U盘插入N1后使用Adb命令重启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.\adb.exe connect 192.168.x.xxx</span><br><span class="line">.\adb.exe shell reboot update</span><br></pre></td></tr></table></figure><p>此时将N1和电脑通过网线连接，SSH访问<code>192.168.1.1</code>，用户为<code>root</code>，密码为<code>password</code>。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/sshop.jpg" alt="sshop"></p><p>输入以下命令开始将OpenWRT安装到N1的EMMC（内置存储）中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;root</span><br><span class="line"> .&#x2F;inst-to-emmc.sh</span><br></pre></td></tr></table></figure><p>等到SSH显示<code>All done, please reboot!</code>时OP就刷好了，拔掉U盘后重启就可以启动OpenWRT了。</p><h2 id="设置旁路由"><a href="#设置旁路由" class="headerlink" title="设置旁路由"></a>设置旁路由</h2><p>我的目标是旁路由负责网关和DNS，主路由负责拨号和DHCP，这样所有的外网流量都会从N1走，就能进行翻墙和去广告了。</p><h3 id="设置-N1"><a href="#设置-N1" class="headerlink" title="设置 N1"></a>设置 N1</h3><p>依旧PC直连N1，进入<code>192.168.1.1</code>，密码为<code>password</code>，进入「网络」-「接口」，编辑LAN设置，按照下图设置。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/n1lan.png" alt=""></p><p>同时关闭DHCP「忽略此接口」</p><p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/n1lan2.png" alt="n1lan2"></p><p>保存&amp;应用修改。</p><h3 id="设置主路由"><a href="#设置主路由" class="headerlink" title="设置主路由"></a>设置主路由</h3><p>将N1连接到主路由的LAN上，进入主路由后台进入<code>192.168.6.1</code>，我使用的是高恪，进入「网络设置」-「DHCP」，将网关和主DNS修改为<code>192.168.6.2</code>（旁路由N1的IP）</p><p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/router.png" alt="router"></p><p><del>如果主路由是OpenWRT的话，在「网络」-「接口」-「LAN」-「DHCP 服务器」-「高级设置」，在「DHCP 选项」中，添加两条参数，<code>3,192.168.6.2</code>（表示DHCP服务网关指向N1），<code>6,192.168.6.2</code> （表示DNS指向N1），可以达到相同的效果。（未测试）</del></p><p>最后，在防火墙设置中添加<code>iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</code>。</p><p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/netinfo.png" alt="netinfo"></p><p>查看当前的连接信息，默认网关和DNS服务器都为<code>192.168.6.2</code>即宣告成功。至此，N1旁路由就设置好了，进入<code>192.168.6.2</code>去配置翻墙吧。</p><h2 id="关于7×24"><a href="#关于7×24" class="headerlink" title="关于7×24"></a>关于7×24</h2><p>本篇为7×24的第一篇。这将会组成一个系列企划，试图回答问题——「一台7×24小时运行的电脑可以用来做什么？」</p><p>一台可以持续运行（低功耗）又功能强大（高性能）的计算机越来越容易获取。从Android手机到电视盒子，从NAS到闲置的x86家用电脑，以ARM和Linux为核心的计算机已经遍布我们的生活，我将以「不折腾，毋宁死」的精神，发掘各种小电脑的玩法。</p><p>这并不是什么新鲜话题，在其他的平台、Blog个中，都已经有崭新的「轮子」。与其说是分享，不如称为出于兴趣的记录。因此，文中会尽量给出相关文章和引用出处，只给出最关键的内容。</p><p>完毕。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;N1是已经暴雷快两年的斐讯留下来的经典矿渣遗产。2GB RAM，四核心ARM SOC，4K 输出，千兆网口，读写30MB+的USB 2.0，决定了N1绝不甘心当一个吃灰的挖矿机。在一众技术大佬的研究下，N1成功转型为电视盒子、NAS、下载机、高清播放器、复古游戏机，以及本文要介绍的旁路由。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="7×24" scheme="http://yoursite.com/tags/7%C3%9724/"/>
    
      <category term="N1" scheme="http://yoursite.com/tags/N1/"/>
    
      <category term="斐讯" scheme="http://yoursite.com/tags/%E6%96%90%E8%AE%AF/"/>
    
      <category term="路由器" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="Phicomm" scheme="http://yoursite.com/tags/Phicomm/"/>
    
  </entry>
  
  <entry>
    <title>小度小芦，一个仿佛有点脑子的蓝牙音响</title>
    <link href="http://yoursite.com/%E5%B0%8F%E5%BA%A6%E5%B0%8F%E8%8A%A6%EF%BC%8C%E4%B8%80%E4%B8%AA%E4%BB%BF%E4%BD%9B%E6%9C%89%E7%82%B9%E8%84%91%E5%AD%90%E7%9A%84%E8%93%9D%E7%89%99%E9%9F%B3%E5%93%8D/"/>
    <id>http://yoursite.com/%E5%B0%8F%E5%BA%A6%E5%B0%8F%E8%8A%A6%EF%BC%8C%E4%B8%80%E4%B8%AA%E4%BB%BF%E4%BD%9B%E6%9C%89%E7%82%B9%E8%84%91%E5%AD%90%E7%9A%84%E8%93%9D%E7%89%99%E9%9F%B3%E5%93%8D/</id>
    <published>2019-08-29T14:00:25.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>人生最大奖！淘宝试用中得的小度蓝牙音箱，一个简短的开箱评测。</p><a id="more"></a><iframe id=sbrxp src="//player.bilibili.com/player.html?aid=65850310&cid=114247095&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 640px; height: 430px; max-width: 100%"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生最大奖！淘宝试用中得的小度蓝牙音箱，一个简短的开箱评测。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="评测" scheme="http://yoursite.com/tags/%E8%AF%84%E6%B5%8B/"/>
    
      <category term="语音" scheme="http://yoursite.com/tags/%E8%AF%AD%E9%9F%B3/"/>
    
      <category term="音响" scheme="http://yoursite.com/tags/%E9%9F%B3%E5%93%8D/"/>
    
  </entry>
  
  <entry>
    <title>X男终章的正确打开方式</title>
    <link href="http://yoursite.com/X%E7%94%B7%E7%BB%88%E7%AB%A0%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/X%E7%94%B7%E7%BB%88%E7%AB%A0%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</id>
    <published>2019-06-08T12:17:51.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>二十年的X战警系列就这么告一段落了，在那个超级英雄电影还是一个新名词的年代，X男老三部用奇妙的想象力里展现了种族内部矛盾，不同种族 的矛盾和人类与自由的矛盾，X教授，万磁王，金刚狼，镭射眼，风暴女……一个个天赋异禀的变种人都经历过“人人喊打”的日子，所以他们的善良、正义和对自由的向往才显得如此珍贵。 <a id="more"></a></p><p>这个变种人故事已经终结过两次了，第一次是老三部的结局，战争结束，失去超能力的教授和万磁王像两个普普通通的甚至想有些羸弱的老人的一样平静地对弈，另一个是金刚狼三，为了保留最后的火种，年迈的金刚狼死在了自己的复制体下——只有金刚狼才能杀死金刚狼。</p><p>作为故事的终章，黑凤凰在一个老粉丝的眼里是不及格的，自我审视的肤浅，感情线的跳跃，反派的空洞（确定不是森林之子过来找三傻寻仇?）就算是最后的一波情怀放送也难以掩盖这些硬伤。</p><p>不过，令人惊讶的是，我居然无意间找到了黑凤凰地正确打开方式——</p><p>这部片里充满着恶趣味，教授魔鬼的步伐，耍个帅被抓走，瑞雯火速安葬，搞笑的战斗走位，在 电影院差点笑出声🙃</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二十年的X战警系列就这么告一段落了，在那个超级英雄电影还是一个新名词的年代，X男老三部用奇妙的想象力里展现了种族内部矛盾，不同种族 的矛盾和人类与自由的矛盾，X教授，万磁王，金刚狼，镭射眼，风暴女……一个个天赋异禀的变种人都经历过“人人喊打”的日子，所以他们的善良、正义和对自由的向往才显得如此珍贵。
    
    </summary>
    
    
    
      <category term="影评" scheme="http://yoursite.com/tags/%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>UCAN 2019的随意参会者的随意记录</title>
    <link href="http://yoursite.com/UCAN-2019%E7%9A%84%E9%9A%8F%E6%84%8F%E5%8F%82%E4%BC%9A%E8%80%85%E7%9A%84%E9%9A%8F%E6%84%8F%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/UCAN-2019%E7%9A%84%E9%9A%8F%E6%84%8F%E5%8F%82%E4%BC%9A%E8%80%85%E7%9A%84%E9%9A%8F%E6%84%8F%E8%AE%B0%E5%BD%95/</id>
    <published>2019-04-30T00:00:00.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离前天结束UCAN到现在已经过去两天了，这两天除了看看GoT，玩一些东西以外别，也整理了当时的笔记和图片，渐渐把当时学习的东西沉淀下来。如果功利得看，这昂贵的门票到底值不值得，似乎很难得出准确的结论。这样子的话，拿一种随遇而安的心态可能会更合适。<a id="more"></a></p><p>以下的记录依旧是非常随意的切入。</p><h2 id="设计有爱"><a href="#设计有爱" class="headerlink" title="设计有爱"></a>设计有爱</h2><p>UCAN的暖场视频里面有这样一段，摄像头前很很多阿里的设计师表达了自己对于UCAN 2019主题“让商业美而简单“主题的看法，有一个观点是设计让价值以一种更美好的方式传达给用户，是不是“夸大”了设计师的力量。</p><p>常常被被戏称为”美工“，被业务、技术乃至是用户“胁迫”去accomplish a design的设计师，在这种商业价值的传达中，究竟能够扮演什么样的角色？</p><p>片尾的谢幕是“设计有爱，温暖未来”。这也许才是设计师真正拥有的价值，这才是设计的使命。蚂蚁金服的梁山鹰以“设计无我”为题的分享非常得情怀，那些他们所做的事情在说，设计是一种可以让世界更美好的力量。即便是面向“商业价值“的设计师，也应该在其中付诸所有的爱，从自我到他人，本我到全局，小我到大家。设计师是爱的践行者。爱是简单的，也是复杂的。</p><h2 id="自然交互"><a href="#自然交互" class="headerlink" title="自然交互"></a>自然交互</h2><p>不知道是巧合还是什么，这届UCAN中听了多余5场和自然交互相关的报告（总共也就听了不到20场），这一部分应当是智能产品设计的发展方向，由阿里的国际体验设计事业部做的用户体验设计部分。除了非常干货的工作流分享外，不得不提的是他们对于智能产品设计的一个基本看法——用设计穿越用户期待与技术能力之间的鸿沟。这又回到了基本问题，设计到底是什么？什么是设计师这个岗位所独有的？当设计师面对崭新的、强大的技术的时候，他们的存在价值是是什么？</p><p>这里，阿里巴巴设计师给了他们的答案，设计是穿越用户期待和技术能力之间的鸿沟。</p><p>先不说我认不认同，这句话透露出了一个非常有趣的认知，就是用户的期待是高过于技术能力的，从VR、AR到区块链、人工智能，似乎这几年崭新的技术的发展，都说明了这一点。技术在一切看不懂的术语下和宏大的愿景中，变得非常得不可捉摸和瑰丽神奇，这就拉高了用户的期待，但是真正落到体验上，却总是不尽如人意，也是我们常说的“不好用”。每一个做产品的人，无论是业务、技术还是设计，对于用户都是有许诺的，如果这种带来高期待的许诺无法真正的兑现，对于用户是一种伤害。</p><p>说回来， 对于智能产品的设计，要践行穿越用户期待和技术能力的设计，首先要知道用户的期待是什么。随着交互方式的不断演进，我们和机器的关系其实是💃式的共融的，机器在进步的同时也在塑造人类的进步（可能是退步也不好说哈哈），走到这一步，当我们可以多模态地与机器进行交流的时候，其实是把逐渐让机器从工具的属性中剥离了出来，而成为一个与人平等的智慧个体。所以这时候的用户对于产品的期待不再简简单单的效率至上，而是会有更多的人格化的追求，也就是智能的设备需要act as a human。</p><p>很多人都有一个贾维斯的梦，无数的AI项目都起名叫做贾维斯，这个漫威宇宙中存在了没多久的机器人助理给观众留下了太深的印象，除了做好本职的工作之外，他还能偶尔幽默，甚至能知道你在想什么，这是人对于机器的终极期待。</p><p>目前，以及很长的未来一段时间，技术能力都是相当局限的，就算我们现在不断地享受着新技术带来的便利，但是依旧无法避免面对越来越多的问题。在很久以前的人类的梦里，技术带来的未来是无限美好的，但实际上，从环境的污染、贫富的不均到内容的泛滥、注意力的丧失，我们的世界离美好依旧还有很远的距离。</p><h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><p>其实参加UCAN给我留下印象最深的，不是听到的什么理论，什么趋势，什么知识点，而是阿里巴巴设计师的工作方式，甚至我都要惊呼一声”卧槽，原来可以这样做设计“或者”哇！原来这个也能被设计“阿里设计师是尽力在拓展设计的边界的，正如UCAN的设计展中，设计师三个字是被打上引号，我们即将面对的是泛化的设计师概念。</p><p>工业设计师在超市工作，平面设计师说起了设计的商业价值，交互设计师一路从用户思考到商业，ToB的网页设计师自己给自己提需求，语言学博士成了设计师群体里的空降兵。这些”设计师们“不仅仅是跨界这么简单，而是真正把自己所做的设计看作了一个事业，让其在知识空间中不断延展，来找到问题的最优解。设计师的边界是在这种融合的浪潮中主动又被动地模糊的，也许就是这样吧，我们所做的一切，都是设计。</p><p>早就听说阿里的设计师长于输出方法论，确有这样的感受，不过这种结合实际的产出的方法论输出，应该就是理想的设计师工作的正确形态，当设计的行为变得高频，当我们粗糙的世界有太多的设计工作需要做的时候，方法论的输出是让设计的车轮不断往前走的最大的驱动力。计算设计也是。</p><hr><p>那么，为什么要选择成为一个设计师呢？我希望用在一则演讲中听到的一件小事回答这个问题，在楼下的咖啡厅里，不小心外放出了天猫精灵的开机音效，隔壁桌的小女孩听到就对她的妈妈说”天猫精灵“”我在，你说“。</p><p>共勉。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离前天结束UCAN到现在已经过去两天了，这两天除了看看GoT，玩一些东西以外别，也整理了当时的笔记和图片，渐渐把当时学习的东西沉淀下来。如果功利得看，这昂贵的门票到底值不值得，似乎很难得出准确的结论。这样子的话，拿一种随遇而安的心态可能会更合适。
    
    </summary>
    
    
    
      <category term="UCAN" scheme="http://yoursite.com/tags/UCAN/"/>
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>中国科幻起航了</title>
    <link href="http://yoursite.com/%E4%B8%AD%E5%9B%BD%E7%A7%91%E5%B9%BB%E8%B5%B7%E8%88%AA%E4%BA%86/"/>
    <id>http://yoursite.com/%E4%B8%AD%E5%9B%BD%E7%A7%91%E5%B9%BB%E8%B5%B7%E8%88%AA%E4%BA%86/</id>
    <published>2019-02-05T18:20:29.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>对大刘的《流浪地球》改编作期待已久，之前的物料也足以看出其创作团队的用心。</p><p>电影的观感不差，演员的演技在线，故事也流畅，特效也能够表现出宇宙的恢宏。但依旧能看到一些明显的问题。 <a id="more"></a></p><p>作为一本灾难片，除了人类团结一心战胜自然之外，最重要的是人类在灾难前后发生的改变，在《流浪地球》中，无论是主要角色还是人类，这种变化都不够强烈。开头缺失三十分钟对地下城生活的描绘，让结尾更“现代化”更“干净整洁”的城市风貌显得莫名其妙。</p><p>三次反转，多次的煽情告白，让故事的高潮太过冗长，以至于最后的让我疲惫不堪，毕竟这个结局是很早就可以预见的。（说实话，我宁可看到一个更悲剧的结局）</p><p>全片只有战狼吴京的角色真正立住了，众多的角色都缺少足够的镜头和台词以至于缺乏性格。角色上其实可以更加精简。中外合资兄弟和吴京的俄罗斯兄弟太过相似，也有一样的包袱抖不开得问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对大刘的《流浪地球》改编作期待已久，之前的物料也足以看出其创作团队的用心。&lt;/p&gt;
&lt;p&gt;电影的观感不差，演员的演技在线，故事也流畅，特效也能够表现出宇宙的恢宏。但依旧能看到一些明显的问题。
    
    </summary>
    
    
    
      <category term="影评" scheme="http://yoursite.com/tags/%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>都9102年了，我们将如何“阅读”？</title>
    <link href="http://yoursite.com/%E9%83%BD9102%E5%B9%B4%E4%BA%86%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%86%E5%A6%82%E4%BD%95%E2%80%9C%E9%98%85%E8%AF%BB%E2%80%9D%EF%BC%9F/"/>
    <id>http://yoursite.com/%E9%83%BD9102%E5%B9%B4%E4%BA%86%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%86%E5%A6%82%E4%BD%95%E2%80%9C%E9%98%85%E8%AF%BB%E2%80%9D%EF%BC%9F/</id>
    <published>2019-01-03T00:00:00.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>📝记录一下第一次参加鱼缸研习社·新知的感想，主要是思考的过程中绕的弯路和解决的思路，大部分都来源于小雷的帮助，也了解到了很多自己思维的不足之处。<a id="more"></a></p><p>最早听说鱼缸是通过小雷，好的坏的观点都有，就算是出于好奇吧也一定要尝试一下。</p><p>思考本身总是给我带来烦恼，但是好在烦恼往往不会令人伤心，而解决烦恼却可以带来愉悦，所以作为一个烦恼复合体也没有什么不好的。</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/2019readcover.png"><p>拿到的话题是精神消费载体——内容和媒介。因为自己就是一个信息输入强迫症，所以对于这个话题是很有研究的欲望的。</p><p>晓君姐给的引子起到了很重要的作用，一下子思路就展开了（虽然后来发现这种展开其实不一定是对的），但是凑在一起讨论就遇到了问题，方法思路上的区别比我想象的大得多，再加上一组员的临时退出，让情况更为严峻。</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/wordnote.png"><p>从有什么，到是什么，再到为什么。</p><p>那能怎么样，自己先硬着头皮上呗。纵向的历史细节充斥在大脑之中，各种媒介的产品似乎按照一定的规律在迭代着，于是我把它们罗列出来，企图找到其中的规律。</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/readposter.png"><p>迭代、转化、混合、弥散，罗列出来的内容比我想象得繁杂得多。那怎么办？我的第一想法是找主线——比方说图书？图书这个东西从纸质书、电子书、网络书城、社交阅读，似乎还挺有规律挺清晰的。但是，凭什么它可以成为主线呢？如何证明呢？</p><p>做不到，在无限的细节里迷失了。</p><p>因为，我才抵达“有什么” 的阶段，我需要知道，它们是什么，这就涉及到了本质问题了。这些细节是否有同一个名字，它们是媒介，那媒介又是什么，它的本质是什么。</p><p>思考本质的问题，最理想的方式是思考其源头，因为万物之源往往简单又纯粹。</p><p>在史前文明里，我们“发明”“媒介”的目的，是将“脑内信息具体化”，通过一种方式，将大脑里的信息，转移到一种介质上，再将其传送给其他的人类个体。</p><p>人类发明语言，将“我想吃饭”的信息口述给伙伴；远古时代，在墙壁上刻画，将这个部落的故事记录下来（因为图画是静态的切片，所以远古的大量壁画都是连环画，以记录时间维度）；我现在输入这些文字，依旧是在将我的所思所想具体化到电子存储之中。</p><p>为什么要做这件事情呢？简单地来说，是生存的压力，这个先行搁置。</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/wordnote3.png"><p>知道媒介是什么意味着，媒介本身的概念不再有意义，媒介只是信息传输的形态。问题变成了信息是如何进行输出、转化、转移、分发、输入等行为的。</p><p>信息和任何“实体”一样，都需要进行生产、储存、传播和消费。（这时候的想法偏向于讲信息作为内容，内容当成商品，后来发现也有很大的局限性）。</p><p>重新梳理的发展历程，建立在几个显著的内容世代切片上，分别是电子化、可读互联网、可写互联网和移动互联网时代。就形成了下面这个看似很有料的表格（事实上是垃圾）。</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/2019readppt.png"><p>回过来讲思考的方法——我们认为，本质的需求是不变的且不能被真正满足的，科技水平是满足水平的天花板，我们的任何的行为方式，只是在当前科技水平下的妥协。</p><p>所以纵向比较的目的是为了找到一个单向发展的属性，这就是技术天花板不断上移时候的趋势。但是，垃圾的表格里面，却无法去完成这个工作。</p><p>框架对了，形态维度却不统一。比方说，表中电子化世代的生产写的是生产的内容形式，而Web1.0世代写的却是生产的方式特点。这种不同维度的罗列是无法进行比较的。</p><p>熬了相当长的时间，终于将这个表格做成了这样——</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/howreadchange.png"><p>核心是信息的创造、承载、分发和呈现，在同一维度的去看待各个阶段的变化，发现了一些非常奇妙的结论。</p><p>生产</p><p>比特化的生产带来的变化是信噪比可以达到无限大（图中100%表述有误）。最显著的例子就是电子乐，电子乐通过比特的组合进行创造，是没有任何不需要的信息（噪音）的，类似的概念还有矢量图、光场计算。所以，电子化的信息让我们可以越来越完整地将头脑中的想法记录下来。</p><p>当下的信息生产的最大特点是“增强电子化”，这个概念的意思是，创造的过程中，我们的信息得到了补充，例如，拍摄一张照片的时候，我们将看到的美丽的风光这个信息记录下来，这不仅仅是CMOS将现实风光的光线、色彩记录下来，更在于通过构图、滤镜、特效将美丽呈现在这张相片之中。生产工具通过提供可用的增强信息，让信息更加完整地生产出来。</p><p>由此看来，信息生产的变化趋势是“损失降低”“速度加快”，也就是尽可能完整地记录所有的信息。</p><p>存储</p><p>存储最大的变化是，从原子本身到原子的行为。将一个故事书写在一张纸张上，是通过墨水原子在空间中的排列方式去存储了信息，而一个故事的文件，是转译成了0和1的原子行为，比如磁化的有和无。</p><hr><p>后面写不动了 不写了。</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/wordnote2.png"><img src="http://q6735zi7x.bkt.clouddn.com/static/images/pgcipflow.png"><p>最后的成果</p><img src="http://q6735zi7x.bkt.clouddn.com/static/images/readposter.png">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;📝记录一下第一次参加鱼缸研习社·新知的感想，主要是思考的过程中绕的弯路和解决的思路，大部分都来源于小雷的帮助，也了解到了很多自己思维的不足之处。
    
    </summary>
    
    
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="鱼缸" scheme="http://yoursite.com/tags/%E9%B1%BC%E7%BC%B8/"/>
    
  </entry>
  
  <entry>
    <title>真正的“小人物”电影</title>
    <link href="http://yoursite.com/%E7%9C%9F%E6%AD%A3%E7%9A%84%E2%80%9C%E5%B0%8F%E4%BA%BA%E7%89%A9%E2%80%9D%E7%94%B5%E5%BD%B1/"/>
    <id>http://yoursite.com/%E7%9C%9F%E6%AD%A3%E7%9A%84%E2%80%9C%E5%B0%8F%E4%BA%BA%E7%89%A9%E2%80%9D%E7%94%B5%E5%BD%B1/</id>
    <published>2018-12-23T14:01:38.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://movie.douban.com/review/7981424/" target="_blank" rel="noopener">《人生已经如此艰难，就不要拆穿（我是个疯子）了》</a>基本说明白了这部荒诞的电影到底讲了什么。 </p><p>我常在街上看到酗酒嗑药到不能自理的人，他们衣衫褴褛举止怪异，但看起来面露满足和快乐。<a id="more"></a>我想大多人并不羡慕这种快乐，离这种人远远的并且在面对酒精和毒品时以他们为戒，提醒自己要理智自律地活着。我虽坚信人生的终极目标是追求快乐而非生存繁衍这些程式化的任务，却也并没有选择像这些疯子一样放纵自己在另一个世界里沉沦。人就是这么矛盾：我们一面告诫自己理性处事委曲求全，一面又羡慕洒脱歌颂自由；一面憧憬长安市上酒家眠的意境，一面嘲笑身边的每一个醉汉。有时我也像这些醉汉一样沉湎于自己的精神世界，那一刻我清楚地知道别人眼里我就是一个疯子。我也因此换位想到，每一个看上去的疯子都可能只是沉浸在我所不能理解的快乐之中而已。</p><p>这其实涉及到了一个立场的问题，我相信因为每个人的身份不同，接触的事物不同，思考的方式不同，每个人感知到的世界都是不一样的。这和善恶正邪其实有相似之处。这就是一本站在疯子立场的电影。和电影中除了主人公的其他人一样 ，我，和大多数我，都是在追求快乐的同时尽可能不违背，甚至去迎合程式化的任务（如人情世故，如普世的成功标准）的。对于沉溺与自我世界，自暴自弃，苟延残喘的生活我们是难以去接触的，是拒绝的。而本片一定程度上赋予了这种卑微人物以所有人追求的东西——对爱的执著和理想。 </p><p>所以说，这是一部拍真正的“小人物”的电影，他们是社会的最底层，是生活中loser，乃至是为人不容的疯子。他们不一定像我们想象得那样痛苦，相反，只是我们难以理解他们的快乐罢了。这有点“子非鱼”的意思。 </p><p>从更大的方面来说，《瑞士军刀男》讲的是人与人之间的不兼容，虽然上天赋予了每个人一样的生命，但是这张生命的白纸会被生活的种种浸染刻画，最终变得难以互相理解。至邪至恶之人，享受邪恶的过程和道德高尚者享受高尚的品行有必然的区别吗？古时王侯将相，今日政商精英，游走在善恶之间，宁可责乎？</p><p>不苛责自己，不苛求别人，每个人的选择都符合了各自的人性</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://movie.douban.com/review/7981424/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《人生已经如此艰难，就不要拆穿（我是个疯子）了》&lt;/a&gt;基本说明白了这部荒诞的电影到底讲了什么。 &lt;/p&gt;
&lt;p&gt;我常在街上看到酗酒嗑药到不能自理的人，他们衣衫褴褛举止怪异，但看起来面露满足和快乐。
    
    </summary>
    
    
    
      <category term="影评" scheme="http://yoursite.com/tags/%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>关于“消费主义”的迷思</title>
    <link href="http://yoursite.com/%E5%85%B3%E4%BA%8E%E2%80%9C%E6%B6%88%E8%B4%B9%E4%B8%BB%E4%B9%89%E2%80%9D%E7%9A%84%E8%BF%B7%E6%80%9D/"/>
    <id>http://yoursite.com/%E5%85%B3%E4%BA%8E%E2%80%9C%E6%B6%88%E8%B4%B9%E4%B8%BB%E4%B9%89%E2%80%9D%E7%9A%84%E8%BF%B7%E6%80%9D/</id>
    <published>2018-12-13T00:00:00.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>消费主义的本质是“将昂贵的东西变高贵”。这里的“变”并非是转变的变，而是更像程序里面的赋值——</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function 消费主义(昂贵)&#123;</span><br><span class="line">昂贵 = 高贵</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>作为底层人民的劳动行为的高尔夫球、滑雪变成了一件“高贵”的运动，有人不远万里到雪场滑雪，拍照，发朋友圈，收获点赞——这一套操作流程宛若天成，事实上也确实是被人精心设计出来的。</p><p>反观“古典”社会里，无论是西方还是东方，都将琴棋书画这些活动当作匹配自己生活阶层的高贵行为，它们的价值不在于昂贵的物质条件，而更在于需要长时间的”修身“。少数的精英、上游社会这样定义了自己的生活方式，在建起自己的Noble高墙的同时，也暗中保留了一种社会价值流动的方式，于是，这样的社会才出现了莫扎特。</p><p>难能可贵的是，在这种自上而下的对美的定义让大众艺术得以产生。艺术是一种个人化的表达，对艺术的认知是本质上是带有猎奇性的。</p><p>所以说，贵族倾覆，中心化的话语权沦陷，商人粉末登场的当今社会，这种新的“上游阶层”改变了原来的社会价值流动方式，用昂贵的商品取而代之。当消费本身成为一种终极的追求，通过金钱就可以购买到高贵的时候，那过程和手段就显得不那么重要了。认可酱缸文化的时候，也是用脚为消费主义社会投票。我一直难以彻底认可，将某某名牌大学生从事低端的行业受益颇丰这样的案例作为成功典范，这种认可背后，是在承认所有努力的最终目的是金钱和以金钱衡量的消费。</p><p>说到这个，可以看到近年来，上海这样的城市里，新中产的教育支出越来越多，太多的是以应对竞争为目的，而非认知本身的教育。小孩子学舞蹈，学钢琴，学画画，不是因为孩子有这个天赋或者有这个兴趣，而是为了竞争来占据前排的位置的时候（如果质疑是不是只有数理社科教育才是竞争导向的，那可以看看现在的学校是怎样招人的），那又一脚踏进了消费主义的陷阱，后者已经将人生赛道的标准完全改变，在先富者的定义下，昂贵的教育投入等同于通向上游社会的船票。</p><p>那所谓知识付费呢？</p><p>不管你承不承认，我们已经浸泡在消费主义的论述里。旧体系被打破，新的出口被开辟，以前的后排可以迅速地改变自己的目标，成了新出口的前排。这是社会认可体系的调整，上帝死了之后，贵族也死了，在“人生而平等”面前，这是一件顺理成章的事情。</p><p>我不是一个旧体系的既得利益者，但是为什么我还要抗拒这种“好”的发展呢？因为“艺术”，或者说一切的个人化的表达。消费主义对新的价值的认可是简单而普世的，消费主义将“金钱”作为人的HP，“购买力”作为人的SP，而放弃了更多的追求。贵族有金钱吗？贵族有购买力吗？都有，但是他们有更“高贵”，真正称得上“高贵”的认可，就是创作艺术的能力，就是个人化表达的能力。</p><p>抖音和滑雪，学琴和知识付费，在“消费”面前都是一样的东西，商人把资源包装成了商品兜售给你，你收获轻松感、舒适感、社交满足感——交易完成，请确认。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;消费主义的本质是“将昂贵的东西变高贵”。这里的“变”并非是转变的变，而是更像程序里面的赋值——&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function 消费主义(昂贵)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	昂贵 = 高贵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="闲谈" scheme="http://yoursite.com/tags/%E9%97%B2%E8%B0%88/"/>
    
      <category term="消费主义" scheme="http://yoursite.com/tags/%E6%B6%88%E8%B4%B9%E4%B8%BB%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>从酬赏角度解读上瘾模型</title>
    <link href="http://yoursite.com/%E4%BB%8E%E9%85%AC%E8%B5%8F%E8%A7%92%E5%BA%A6%E8%A7%A3%E8%AF%BB%E4%B8%8A%E7%98%BE%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/%E4%BB%8E%E9%85%AC%E8%B5%8F%E8%A7%92%E5%BA%A6%E8%A7%A3%E8%AF%BB%E4%B8%8A%E7%98%BE%E6%A8%A1%E5%9E%8B/</id>
    <published>2018-11-01T00:00:00.000Z</published>
    <updated>2020-03-18T12:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>上瘾模型对于习惯养成型产品的设计易于理解且非常有效。但是，在“多变的酬赏”部分，作者对“酬赏”并没有作出很好的解释，只是表示对酬赏的渴望而不是酬赏本身使人产生行动的动力;对“多变”的必要性，作者以婴儿对新奇事物的习惯而漠视为例实为不妥，新奇事物在这里只是一个行为的触发而非酬赏，倒是说“多变的触发”更加合理。<a id="more"></a></p><p>和小雷的讨论之后，我们将酬赏的概念定义为：在用户的认知体系下的增值。</p><p>从上瘾模型的入口去看，用户之所以被特定的触发吸引，已经符合了一定的认知特质，这种特质在酬赏设计的过程中值得被考虑，比如被低数额的奖励金触发的用户，在筹商阶段对于金钱的敏感度更高，在这些用户的认知体系中，小恩小惠的增值是极具吸引力的。如果酬赏的方式和触发的方式背后的认知体系不同，反而会起到反作用，如即刻App在社交化转型期，广告宣传上以“每天十分钟，看点新鲜事”的高效率、低干扰的特性进行用户触发，而酬赏环节却开始强调社交酬赏，这两者的认知体系是互相冲突的，用户的反感在所难免。一个墙上贴满成绩单的教室和一个欢声笑语的教室里面坐什么样的人，在用户决定敲哪扇门时就已经定下了。</p><p>有些认知体系的增值不是与生俱来的，如一个游戏的等级制度，对于新玩家来说是陌生的，游戏需要以明确的形式传达“升级非常有价值”这个信息，以建立新的认知体系，让用户更容易被“升级”这个自我酬赏所激励。</p><p>对于“增值”的概念可以进一步的解释，人会自发地对其付出的行动损失和获得的酬赏价值进行比较，对于不同的用户来说，相同的酬赏的价值是不同的，100块对于我来说是好几天的生活费，但是对于一个富翁来说是几分钟的收入，增值=收入&gt;付出。但是，这种价值判断是可变的，往往和“场景”有关，在一个温和的社交环境中，一个反社交的人也可以认可社交酬赏的价值;在一个路边摊穿得比较邋遢也是可以接受的。</p><p>如果筹赏的方式是无法修改的（如社交产品的酬赏必定和社交酬赏有关），如何解决酬赏和既有认知冲突呢？认知失调理论提供了一种方法：人会自发地对自己的认知进行“修正”，获得的筹赏低于但是接近最低辩护点，人最有可能改变自己的认知，而超过这个最低辩护点，反而会选择保留之前的认知。这里的酬赏与否不会改变行动已经实施的事实，但是会影响用户是否能再次进行行动，即养成习惯。</p><p>所以，在产品的设计过程中，保证触发和酬赏的认知体系一致性，对增值进行快速的定义，设定合适的场景调整价值的判断，甚至去修正用户的认知，都是值得考虑的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上瘾模型对于习惯养成型产品的设计易于理解且非常有效。但是，在“多变的酬赏”部分，作者对“酬赏”并没有作出很好的解释，只是表示对酬赏的渴望而不是酬赏本身使人产生行动的动力;对“多变”的必要性，作者以婴儿对新奇事物的习惯而漠视为例实为不妥，新奇事物在这里只是一个行为的触发而非酬赏，倒是说“多变的触发”更加合理。
    
    </summary>
    
    
    
      <category term="设计" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="上瘾模型" scheme="http://yoursite.com/tags/%E4%B8%8A%E7%98%BE%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
</feed>

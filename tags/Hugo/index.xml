<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on 冰屋里</title>
    <link>https://igloo302.github.io/tags/hugo/</link>
    <description>Recent content in Hugo on 冰屋里</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Mar 2020 20:59:48 +0000</lastBuildDate>
    
	<atom:link href="https://igloo302.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在Hugo博客插入保持宽高比的iframe视频</title>
      <link>https://igloo302.github.io/2020/%E5%9C%A8hugo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E4%BF%9D%E6%8C%81%E5%AE%BD%E9%AB%98%E6%AF%94%E7%9A%84iframe%E8%A7%86%E9%A2%91/</link>
      <pubDate>Sat, 21 Mar 2020 20:59:48 +0000</pubDate>
      
      <guid>https://igloo302.github.io/2020/%E5%9C%A8hugo%E5%8D%9A%E5%AE%A2%E6%8F%92%E5%85%A5%E4%BF%9D%E6%8C%81%E5%AE%BD%E9%AB%98%E6%AF%94%E7%9A%84iframe%E8%A7%86%E9%A2%91/</guid>
      <description>在Hugo实现的作品集静态网站插入视频的时候，遇到了一个问题：视频无法根据页面宽度自动调整宽高比，导致视频在手机这种小屏幕上会出现上下黑边。
这个问题可以使用CSS来解决。最简单的方式就是将视频的iframe放在一个保持宽高比的div中（代码源自此处）：
/* 这个规则规定了iframe父元素容器的尺寸，16:9的近似值为56%*/ .selfadapting-video { position: relative;width: 100%;height: 0;padding-bottom: 56%; /* 高度应该是宽度的56% */} /* 设定iframe的宽度和高度，让iframe占满整个父元素容器 */.selfadapting-video iframe { position: absolute;width: 100%;height: 100%;left: 0;top: 0;}如果使用的是Hugo，打开~\themes\主题名\static\css，在custom.css中添加。
如果是Hexo+next主题，首先在~\themes\next\source\css\main.styl中添加一行以使用自定义css
@import &amp;#34;_custom&amp;#34;;然后在~\themes\next\source\css\新建文件custom.styl并添加上述CSS。
删去iframe中关于高度和宽度的设定，将其添加到 &amp;lt;div class=&amp;quot;selfadapting-video-bilibili&amp;quot;&amp;gt; ... &amp;lt;/div&amp;gt;之中：
&amp;lt;div class=&amp;#34;selfadapting-video&amp;#34;&amp;gt;&amp;lt;iframe src=&amp;#39;https://player.youku.com/embed/XNDU5NTkzNjQ4MA==&amp;#39; scrolling=&amp;#34;no&amp;#34; border=&amp;#34;0&amp;#34; frameborder=&amp;#34;no&amp;#34; framespacing=&amp;#34;0&amp;#34; allowfullscreen=&amp;#34;true&amp;#34; style=&amp;#34;max-width: 100%&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt;对于优酷、Youtube这种，这个CSS已经可以用了，但是我常用的B站的iframe有一个特殊的机制：
在屏幕宽度较大时，B站的iframe会包含额外的顶部广告栏bilibili-player-video-recommend和底部控制栏bilibili-player-video-control，也就是说需要在宽度不同时实现不同的padding-bottom。
以这个主题为例，本身这个页面已经实现了响应式布局，也就是针对不同的页面适配不同的栅格，具体的栅格设定可以在Html文件中看到：
这样我们就可以根据Bootstrap的网格系统来计算一下在屏幕宽度为多少的时候应该修改视频的比例……当然这样有点麻烦。一个投机取巧的方式是打开Chrome，右击检查，将检查页面放置在右侧，拖动检查页面的宽度，此时网页的右上角会显示出网页的分辨率，此时只要观察视频在什么时候发生比例变化就可以了。
经过尝试，发现屏幕宽度为728px、767px、992px时画面会自适应而发生视频宽度突变。所以修改CSS，使用@media来定义不同宽度时的视频比例。
 使用 @media 查询，你可以针对不同的媒体类型定义不同的样式。
@media 可以针对不同的屏幕尺寸设置不同的样式，特别是如果你需要设置设计响应式的页面，@media 是非常有用的。</description>
    </item>
    
    <item>
      <title>30分钟建立一个作品集网站 powered by Hugo</title>
      <link>https://igloo302.github.io/2020/30%E5%88%86%E9%92%9F%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E4%BD%9C%E5%93%81%E9%9B%86%E7%BD%91%E7%AB%99-powered-by-hugo/</link>
      <pubDate>Sat, 29 Feb 2020 11:25:06 +0000</pubDate>
      
      <guid>https://igloo302.github.io/2020/30%E5%88%86%E9%92%9F%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E4%BD%9C%E5%93%81%E9%9B%86%E7%BD%91%E7%AB%99-powered-by-hugo/</guid>
      <description>昨天看到猪场的暑期实习开始“招标”了，头上划过几道黑线。赋闲在家快一个半月，简历和作品集都没有好好准备。上次用Hexo重建了这个Blog的时候，看到了很好看的Hugo博客，还有一个LeaveIt主题非常可爱，就心水不已。翻了翻Hugo的Theme页面，好看的真不少，可能是英语用户比较多吧:)
干脆单独建一个项目，拿Hugo把作品集重建一下吧，之后有时间的话，会尝试做一版自己的主题将Blog和Portfolio整合在一起。
安装环境   Windows 10
  装好Chocolatey
  安装Hugo和初始化 在各种平台的安装放在看这里，因为我装好了Chocolatey ，所以直接一步执行：
choco install hugo -confirm 输入命令检查是否安装成功：
hugo version 进入一个想要放Hugo文件夹的目录，Shift+右键打开PowerShell，输入命令：
hugo new site portfolio # 站点名称 这样Hugo会自动创建一个名为portfolio的文件夹，里面包含了站点所需的所有文件：
设置主题 可以在Hugo Themes中找到数百款不同风格的Hugo主题，还可以根据站点的类型选择Tag。在portfolio标签下面意外发现了我之间使用的Bootstrap主题Freelancer :)
B站UP TenGuSan 提过，作品集需要适配手机的屏幕和比例，最基本的一点就是不能要求阅读者ZOOM IN &amp;amp; OUT。题外话，这个角度上，小红书的缩放功非常优秀。
我找到了两款比较符合自己喜好的：
Creative portfolio会相对更加简洁一点。
Parsa Hugo可以展示重点项目、Instagram照片，完全可以用来当作一个完整的Blog。
选择自己喜欢的Theme，找到Git地址，输入以下命令：
cd .\portfolio\ git init git submodule add https://github.com/kishaningithub/hugo-creative-portfolio-theme.git themes/creative 主题已经下载到themes/Creative文件夹下了，将portfolio\themes\creative\exampleSite中的所有文件复制到portfolio\目录中（复制并替换），打开根目录的配置文件config.toml，将theme = &amp;quot;hugo-creative-portfolio-theme&amp;quot;修改为theme = &amp;quot;creative&amp;quot;。
运行命令便可以在http://localhost:1313/中访问这个Sample Site了。
hugo server 部署到GitHub Pages 我们还是使用GitHub Pages作为托管服务器。直接运行hugo命令，就会创建public文件夹，里面就是这个静态网站所有的文件了，像此前hexo教程中一样，直接push这个文件夹到Github的username.github.io就可以访问了。
但是会有两个问题：
 我已经使用了username.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://igloo302.github.io/draft/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://igloo302.github.io/draft/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://igloo302.github.io/draft/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://igloo302.github.io/draft/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>